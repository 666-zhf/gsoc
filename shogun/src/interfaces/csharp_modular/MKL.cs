/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class MKL : SVM {
  private HandleRef swigCPtr;

  internal MKL(IntPtr cPtr, bool cMemoryOwn) : base(modshogunPINVOKE.MKLUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(MKL obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~MKL() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          modshogunPINVOKE.delete_MKL(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public void set_constraint_generator(SVM s) {
    modshogunPINVOKE.MKL_set_constraint_generator(swigCPtr, SVM.getCPtr(s));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_svm(SVM s) {
    modshogunPINVOKE.MKL_set_svm(swigCPtr, SVM.getCPtr(s));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public SVM get_svm() {
    IntPtr cPtr = modshogunPINVOKE.MKL_get_svm(swigCPtr);
    SVM ret = (cPtr == IntPtr.Zero) ? null : new SVM(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_C_mkl(double C) {
    modshogunPINVOKE.MKL_set_C_mkl(swigCPtr, C);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_mkl_norm(double norm) {
    modshogunPINVOKE.MKL_set_mkl_norm(swigCPtr, norm);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_elasticnet_lambda(double elasticnet_lambda) {
    modshogunPINVOKE.MKL_set_elasticnet_lambda(swigCPtr, elasticnet_lambda);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_mkl_block_norm(double q) {
    modshogunPINVOKE.MKL_set_mkl_block_norm(swigCPtr, q);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_interleaved_optimization_enabled(bool enable) {
    modshogunPINVOKE.MKL_set_interleaved_optimization_enabled(swigCPtr, enable);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool get_interleaved_optimization_enabled() {
    bool ret = modshogunPINVOKE.MKL_get_interleaved_optimization_enabled(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double compute_mkl_primal_objective() {
    double ret = modshogunPINVOKE.MKL_compute_mkl_primal_objective(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double compute_mkl_dual_objective() {
    double ret = modshogunPINVOKE.MKL_compute_mkl_dual_objective(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double compute_elasticnet_dual_objective() {
    double ret = modshogunPINVOKE.MKL_compute_elasticnet_dual_objective(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_mkl_epsilon(double eps) {
    modshogunPINVOKE.MKL_set_mkl_epsilon(swigCPtr, eps);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public double get_mkl_epsilon() {
    double ret = modshogunPINVOKE.MKL_get_mkl_epsilon(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int get_mkl_iterations() {
    int ret = modshogunPINVOKE.MKL_get_mkl_iterations(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool perform_mkl_step(SWIGTYPE_p_double sumw, double suma) {
    bool ret = modshogunPINVOKE.MKL_perform_mkl_step(swigCPtr, SWIGTYPE_p_double.getCPtr(sumw), suma);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool perform_mkl_step_helper(MKL mkl, SWIGTYPE_p_double sumw, double suma) {
    bool ret = modshogunPINVOKE.MKL_perform_mkl_step_helper(MKL.getCPtr(mkl), SWIGTYPE_p_double.getCPtr(sumw), suma);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double compute_sum_alpha() {
    double ret = modshogunPINVOKE.MKL_compute_sum_alpha(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void compute_sum_beta(SWIGTYPE_p_double sumw) {
    modshogunPINVOKE.MKL_compute_sum_beta(swigCPtr, SWIGTYPE_p_double.getCPtr(sumw));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

}
