/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class SVMOcas : LinearMachine {
  private HandleRef swigCPtr;

  internal SVMOcas(IntPtr cPtr, bool cMemoryOwn) : base(modshogunPINVOKE.SVMOcasUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(SVMOcas obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~SVMOcas() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          modshogunPINVOKE.delete_SVMOcas(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public SVMOcas() : this(modshogunPINVOKE.new_SVMOcas__SWIG_0(), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public SVMOcas(E_SVM_TYPE type) : this(modshogunPINVOKE.new_SVMOcas__SWIG_1((int)type), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public SVMOcas(double C, DotFeatures traindat, Labels trainlab) : this(modshogunPINVOKE.new_SVMOcas__SWIG_2(C, DotFeatures.getCPtr(traindat), Labels.getCPtr(trainlab)), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_C(double c_neg, double c_pos) {
    modshogunPINVOKE.SVMOcas_set_C(swigCPtr, c_neg, c_pos);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public double get_C1() {
    double ret = modshogunPINVOKE.SVMOcas_get_C1(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double get_C2() {
    double ret = modshogunPINVOKE.SVMOcas_get_C2(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_epsilon(double eps) {
    modshogunPINVOKE.SVMOcas_set_epsilon(swigCPtr, eps);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public double get_epsilon() {
    double ret = modshogunPINVOKE.SVMOcas_get_epsilon(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_bias_enabled(bool enable_bias) {
    modshogunPINVOKE.SVMOcas_set_bias_enabled(swigCPtr, enable_bias);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool get_bias_enabled() {
    bool ret = modshogunPINVOKE.SVMOcas_get_bias_enabled(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_bufsize(int sz) {
    modshogunPINVOKE.SVMOcas_set_bufsize(swigCPtr, sz);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public int get_bufsize() {
    int ret = modshogunPINVOKE.SVMOcas_get_bufsize(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
