/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class PlifBase : SGObject {
  private HandleRef swigCPtr;

  internal PlifBase(IntPtr cPtr, bool cMemoryOwn) : base(modshogunPINVOKE.PlifBaseUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(PlifBase obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PlifBase() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          modshogunPINVOKE.delete_PlifBase(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public virtual double lookup_penalty(double p_value, SWIGTYPE_p_double svm_values) {
    double ret = modshogunPINVOKE.PlifBase_lookup_penalty__SWIG_0(swigCPtr, p_value, SWIGTYPE_p_double.getCPtr(svm_values));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double lookup_penalty(int p_value, SWIGTYPE_p_double svm_values) {
    double ret = modshogunPINVOKE.PlifBase_lookup_penalty__SWIG_1(swigCPtr, p_value, SWIGTYPE_p_double.getCPtr(svm_values));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void penalty_clear_derivative() {
    modshogunPINVOKE.PlifBase_penalty_clear_derivative(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void penalty_add_derivative(double p_value, SWIGTYPE_p_double svm_values, double factor) {
    modshogunPINVOKE.PlifBase_penalty_add_derivative(swigCPtr, p_value, SWIGTYPE_p_double.getCPtr(svm_values), factor);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual double get_max_value() {
    double ret = modshogunPINVOKE.PlifBase_get_max_value(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double get_min_value() {
    double ret = modshogunPINVOKE.PlifBase_get_min_value(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void get_used_svms(SWIGTYPE_p_int num_svms, SWIGTYPE_p_int svm_ids) {
    modshogunPINVOKE.PlifBase_get_used_svms(swigCPtr, SWIGTYPE_p_int.getCPtr(num_svms), SWIGTYPE_p_int.getCPtr(svm_ids));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool uses_svm_values() {
    bool ret = modshogunPINVOKE.PlifBase_uses_svm_values(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int get_max_id() {
    int ret = modshogunPINVOKE.PlifBase_get_max_id(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void list_plif() {
    modshogunPINVOKE.PlifBase_list_plif(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

}
