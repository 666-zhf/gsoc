/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class StringUlongFeatures : Features {
  private HandleRef swigCPtr;

  internal StringUlongFeatures(IntPtr cPtr, bool cMemoryOwn) : base(modshogunPINVOKE.StringUlongFeaturesUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(StringUlongFeatures obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~StringUlongFeatures() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          modshogunPINVOKE.delete_StringUlongFeatures(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public StringUlongFeatures() : this(modshogunPINVOKE.new_StringUlongFeatures__SWIG_0(), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public StringUlongFeatures(EAlphabet alpha) : this(modshogunPINVOKE.new_StringUlongFeatures__SWIG_1((int)alpha), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public StringUlongFeatures(long[,] string_list, EAlphabet alpha) : this(modshogunPINVOKE.new_StringUlongFeatures__SWIG_2(string_list.GetLength(0), string_list.GetLength(1), string_list, (int)alpha), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public StringUlongFeatures(long[,] string_list, Alphabet alpha) : this(modshogunPINVOKE.new_StringUlongFeatures__SWIG_3(string_list.GetLength(0), string_list.GetLength(1), string_list, Alphabet.getCPtr(alpha)), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public StringUlongFeatures(Alphabet alpha) : this(modshogunPINVOKE.new_StringUlongFeatures__SWIG_4(Alphabet.getCPtr(alpha)), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public StringUlongFeatures(StringUlongFeatures orig) : this(modshogunPINVOKE.new_StringUlongFeatures__SWIG_5(StringUlongFeatures.getCPtr(orig)), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public StringUlongFeatures(File loader, EAlphabet alpha) : this(modshogunPINVOKE.new_StringUlongFeatures__SWIG_6(File.getCPtr(loader), (int)alpha), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public StringUlongFeatures(File loader) : this(modshogunPINVOKE.new_StringUlongFeatures__SWIG_7(File.getCPtr(loader)), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void cleanup_feature_vector(int num) {
    modshogunPINVOKE.StringUlongFeatures_cleanup_feature_vector(swigCPtr, num);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void cleanup_feature_vectors(int start, int stop) {
    modshogunPINVOKE.StringUlongFeatures_cleanup_feature_vectors(swigCPtr, start, stop);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public Alphabet get_alphabet() {
    IntPtr cPtr = modshogunPINVOKE.StringUlongFeatures_get_alphabet(swigCPtr);
    Alphabet ret = (cPtr == IntPtr.Zero) ? null : new Alphabet(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public long[] get_feature_vector(int num) {
		IntPtr ptr = modshogunPINVOKE.StringUlongFeatures_get_feature_vector(swigCPtr, num);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
		int[] size = new int[1];
		Marshal.Copy(ptr, size, 0, 1);

		int len = size[0];

		long[] ret = new long[len];

		Marshal.Copy(new IntPtr(ptr.ToInt64() + Marshal.SizeOf(typeof(int))), ret, 0, len);
		return ret;
}

  public void set_feature_vector(long[] vector, int num) {
    modshogunPINVOKE.StringUlongFeatures_set_feature_vector(swigCPtr, vector.Length, vector, num);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void enable_on_the_fly_preprocessing() {
    modshogunPINVOKE.StringUlongFeatures_enable_on_the_fly_preprocessing(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void disable_on_the_fly_preprocessing() {
    modshogunPINVOKE.StringUlongFeatures_disable_on_the_fly_preprocessing(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public StringUlongFeatures get_transposed() {
    IntPtr cPtr = modshogunPINVOKE.StringUlongFeatures_get_transposed(swigCPtr);
    StringUlongFeatures ret = (cPtr == IntPtr.Zero) ? null : new StringUlongFeatures(cPtr, true);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ulong get_feature(int vec_num, int feat_num) {
    ulong ret = modshogunPINVOKE.StringUlongFeatures_get_feature(swigCPtr, vec_num, feat_num);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int get_vector_length(int vec_num) {
    int ret = modshogunPINVOKE.StringUlongFeatures_get_vector_length(swigCPtr, vec_num);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int get_max_vector_length() {
    int ret = modshogunPINVOKE.StringUlongFeatures_get_max_vector_length(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_long_double get_num_symbols() {
    SWIGTYPE_p_long_double ret = new SWIGTYPE_p_long_double(modshogunPINVOKE.StringUlongFeatures_get_num_symbols(swigCPtr), true);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_long_double get_max_num_symbols() {
    SWIGTYPE_p_long_double ret = new SWIGTYPE_p_long_double(modshogunPINVOKE.StringUlongFeatures_get_max_num_symbols(swigCPtr), true);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_long_double get_original_num_symbols() {
    SWIGTYPE_p_long_double ret = new SWIGTYPE_p_long_double(modshogunPINVOKE.StringUlongFeatures_get_original_num_symbols(swigCPtr), true);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int get_order() {
    int ret = modshogunPINVOKE.StringUlongFeatures_get_order(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ulong get_masked_symbols(ulong symbol, byte mask) {
    ulong ret = modshogunPINVOKE.StringUlongFeatures_get_masked_symbols(swigCPtr, symbol, mask);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ulong shift_offset(ulong offset, int amount) {
    ulong ret = modshogunPINVOKE.StringUlongFeatures_shift_offset(swigCPtr, offset, amount);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ulong shift_symbol(ulong symbol, int amount) {
    ulong ret = modshogunPINVOKE.StringUlongFeatures_shift_symbol(swigCPtr, symbol, amount);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void load_ascii_file(string fname, bool remap_to_bin, EAlphabet ascii_alphabet, EAlphabet binary_alphabet) {
    modshogunPINVOKE.StringUlongFeatures_load_ascii_file__SWIG_0(swigCPtr, fname, remap_to_bin, (int)ascii_alphabet, (int)binary_alphabet);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void load_ascii_file(string fname, bool remap_to_bin, EAlphabet ascii_alphabet) {
    modshogunPINVOKE.StringUlongFeatures_load_ascii_file__SWIG_1(swigCPtr, fname, remap_to_bin, (int)ascii_alphabet);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void load_ascii_file(string fname, bool remap_to_bin) {
    modshogunPINVOKE.StringUlongFeatures_load_ascii_file__SWIG_2(swigCPtr, fname, remap_to_bin);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void load_ascii_file(string fname) {
    modshogunPINVOKE.StringUlongFeatures_load_ascii_file__SWIG_3(swigCPtr, fname);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool load_fasta_file(string fname, bool ignore_invalid) {
    bool ret = modshogunPINVOKE.StringUlongFeatures_load_fasta_file__SWIG_0(swigCPtr, fname, ignore_invalid);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool load_fasta_file(string fname) {
    bool ret = modshogunPINVOKE.StringUlongFeatures_load_fasta_file__SWIG_1(swigCPtr, fname);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool load_fastq_file(string fname, bool ignore_invalid, bool bitremap_in_single_string) {
    bool ret = modshogunPINVOKE.StringUlongFeatures_load_fastq_file__SWIG_0(swigCPtr, fname, ignore_invalid, bitremap_in_single_string);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool load_fastq_file(string fname, bool ignore_invalid) {
    bool ret = modshogunPINVOKE.StringUlongFeatures_load_fastq_file__SWIG_1(swigCPtr, fname, ignore_invalid);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool load_fastq_file(string fname) {
    bool ret = modshogunPINVOKE.StringUlongFeatures_load_fastq_file__SWIG_2(swigCPtr, fname);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool load_from_directory(string dirname) {
    bool ret = modshogunPINVOKE.StringUlongFeatures_load_from_directory(swigCPtr, dirname);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_features(long[,] feats) {
    modshogunPINVOKE.StringUlongFeatures_set_features(swigCPtr, feats.GetLength(0), feats.GetLength(1), feats);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool append_features(StringUlongFeatures sf) {
    bool ret = modshogunPINVOKE.StringUlongFeatures_append_features(swigCPtr, StringUlongFeatures.getCPtr(sf));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public long[,] get_features() {
	IntPtr ptr = modshogunPINVOKE.StringUlongFeatures_get_features(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
	long[] ranks = new long[2];
	Marshal.Copy(ptr, ranks, 0, 2);

	int rows = (int)ranks[0];
	int cols = (int)ranks[1];
	int len = rows * cols;

	long[] ret = new long[len];

	Marshal.Copy(new IntPtr(ptr.ToInt64() + 2 * Marshal.SizeOf(typeof(long))), ret, 0, len);

	long[,] result = new long[rows, cols];
	for (int i = 0; i < rows; i++) {
		for (int j = 0; j < cols; j++) {
			result[i, j] = ret[i * cols + j];
		}
	}
	return result;
}

  public virtual bool load_compressed(string src, bool decompress) {
    bool ret = modshogunPINVOKE.StringUlongFeatures_load_compressed(swigCPtr, src, decompress);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool save_compressed(string dest, E_COMPRESSION_TYPE compression, int level) {
    bool ret = modshogunPINVOKE.StringUlongFeatures_save_compressed(swigCPtr, dest, (int)compression, level);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool apply_preprocessor(bool force_preprocessing) {
    bool ret = modshogunPINVOKE.StringUlongFeatures_apply_preprocessor__SWIG_0(swigCPtr, force_preprocessing);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool apply_preprocessor() {
    bool ret = modshogunPINVOKE.StringUlongFeatures_apply_preprocessor__SWIG_1(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int obtain_by_sliding_window(int window_size, int step_size, int skip) {
    int ret = modshogunPINVOKE.StringUlongFeatures_obtain_by_sliding_window__SWIG_0(swigCPtr, window_size, step_size, skip);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int obtain_by_sliding_window(int window_size, int step_size) {
    int ret = modshogunPINVOKE.StringUlongFeatures_obtain_by_sliding_window__SWIG_1(swigCPtr, window_size, step_size);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int obtain_by_position_list(int window_size, DynamicIntArray positions, int skip) {
    int ret = modshogunPINVOKE.StringUlongFeatures_obtain_by_position_list__SWIG_0(swigCPtr, window_size, DynamicIntArray.getCPtr(positions), skip);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int obtain_by_position_list(int window_size, DynamicIntArray positions) {
    int ret = modshogunPINVOKE.StringUlongFeatures_obtain_by_position_list__SWIG_1(swigCPtr, window_size, DynamicIntArray.getCPtr(positions));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool obtain_from_char(StringCharFeatures sf, int start, int p_order, int gap, bool rev) {
    bool ret = modshogunPINVOKE.StringUlongFeatures_obtain_from_char(swigCPtr, StringCharFeatures.getCPtr(sf), start, p_order, gap, rev);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool have_same_length(int len) {
    bool ret = modshogunPINVOKE.StringUlongFeatures_have_same_length__SWIG_0(swigCPtr, len);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool have_same_length() {
    bool ret = modshogunPINVOKE.StringUlongFeatures_have_same_length__SWIG_1(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void embed_features(int p_order) {
    modshogunPINVOKE.StringUlongFeatures_embed_features(swigCPtr, p_order);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void compute_symbol_mask_table(long max_val) {
    modshogunPINVOKE.StringUlongFeatures_compute_symbol_mask_table(swigCPtr, max_val);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void determine_maximum_string_length() {
    modshogunPINVOKE.StringUlongFeatures_determine_maximum_string_length(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

}
