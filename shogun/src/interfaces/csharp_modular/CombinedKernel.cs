/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class CombinedKernel : Kernel {
  private HandleRef swigCPtr;

  internal CombinedKernel(IntPtr cPtr, bool cMemoryOwn) : base(modshogunPINVOKE.CombinedKernelUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(CombinedKernel obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CombinedKernel() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          modshogunPINVOKE.delete_CombinedKernel(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public CombinedKernel(int size, bool append_subkernel_weights) : this(modshogunPINVOKE.new_CombinedKernel__SWIG_0(size, append_subkernel_weights), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public CombinedKernel(int size) : this(modshogunPINVOKE.new_CombinedKernel__SWIG_1(size), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public CombinedKernel() : this(modshogunPINVOKE.new_CombinedKernel__SWIG_2(), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void list_kernels() {
    modshogunPINVOKE.CombinedKernel_list_kernels(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public Kernel get_first_kernel() {
    IntPtr cPtr = modshogunPINVOKE.CombinedKernel_get_first_kernel__SWIG_0(swigCPtr);
    Kernel ret = (cPtr == IntPtr.Zero) ? null : new Kernel(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Kernel get_first_kernel(ListElement current) {
    IntPtr cPtr = modshogunPINVOKE.CombinedKernel_get_first_kernel__SWIG_1(swigCPtr, ListElement.getCPtr(current));
    Kernel ret = (cPtr == IntPtr.Zero) ? null : new Kernel(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Kernel get_kernel(int idx) {
    IntPtr cPtr = modshogunPINVOKE.CombinedKernel_get_kernel(swigCPtr, idx);
    Kernel ret = (cPtr == IntPtr.Zero) ? null : new Kernel(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Kernel get_last_kernel() {
    IntPtr cPtr = modshogunPINVOKE.CombinedKernel_get_last_kernel(swigCPtr);
    Kernel ret = (cPtr == IntPtr.Zero) ? null : new Kernel(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Kernel get_next_kernel() {
    IntPtr cPtr = modshogunPINVOKE.CombinedKernel_get_next_kernel__SWIG_0(swigCPtr);
    Kernel ret = (cPtr == IntPtr.Zero) ? null : new Kernel(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Kernel get_next_kernel(ListElement current) {
    IntPtr cPtr = modshogunPINVOKE.CombinedKernel_get_next_kernel__SWIG_1(swigCPtr, ListElement.getCPtr(current));
    Kernel ret = (cPtr == IntPtr.Zero) ? null : new Kernel(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool insert_kernel(Kernel k) {
    bool ret = modshogunPINVOKE.CombinedKernel_insert_kernel(swigCPtr, Kernel.getCPtr(k));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool append_kernel(Kernel k) {
    bool ret = modshogunPINVOKE.CombinedKernel_append_kernel(swigCPtr, Kernel.getCPtr(k));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool delete_kernel() {
    bool ret = modshogunPINVOKE.CombinedKernel_delete_kernel(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool get_append_subkernel_weights() {
    bool ret = modshogunPINVOKE.CombinedKernel_get_append_subkernel_weights(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void compute_batch(int num_vec, SWIGTYPE_p_int vec_idx, SWIGTYPE_p_double target, int num_suppvec, SWIGTYPE_p_int IDX, SWIGTYPE_p_double alphas, double factor) {
    modshogunPINVOKE.CombinedKernel_compute_batch__SWIG_0(swigCPtr, num_vec, SWIGTYPE_p_int.getCPtr(vec_idx), SWIGTYPE_p_double.getCPtr(target), num_suppvec, SWIGTYPE_p_int.getCPtr(IDX), SWIGTYPE_p_double.getCPtr(alphas), factor);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void compute_batch(int num_vec, SWIGTYPE_p_int vec_idx, SWIGTYPE_p_double target, int num_suppvec, SWIGTYPE_p_int IDX, SWIGTYPE_p_double alphas) {
    modshogunPINVOKE.CombinedKernel_compute_batch__SWIG_1(swigCPtr, num_vec, SWIGTYPE_p_int.getCPtr(vec_idx), SWIGTYPE_p_double.getCPtr(target), num_suppvec, SWIGTYPE_p_int.getCPtr(IDX), SWIGTYPE_p_double.getCPtr(alphas));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_void compute_optimized_kernel_helper(SWIGTYPE_p_void p) {
    IntPtr cPtr = modshogunPINVOKE.CombinedKernel_compute_optimized_kernel_helper(SWIGTYPE_p_void.getCPtr(p));
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void compute_kernel_helper(SWIGTYPE_p_void p) {
    IntPtr cPtr = modshogunPINVOKE.CombinedKernel_compute_kernel_helper(SWIGTYPE_p_void.getCPtr(p));
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void emulate_compute_batch(Kernel k, int num_vec, SWIGTYPE_p_int vec_idx, SWIGTYPE_p_double target, int num_suppvec, SWIGTYPE_p_int IDX, SWIGTYPE_p_double weights) {
    modshogunPINVOKE.CombinedKernel_emulate_compute_batch(swigCPtr, Kernel.getCPtr(k), num_vec, SWIGTYPE_p_int.getCPtr(vec_idx), SWIGTYPE_p_double.getCPtr(target), num_suppvec, SWIGTYPE_p_int.getCPtr(IDX), SWIGTYPE_p_double.getCPtr(weights));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public override SWIGTYPE_p_double get_subkernel_weights(SWIGTYPE_p_int num_weights) {
    IntPtr cPtr = modshogunPINVOKE.CombinedKernel_get_subkernel_weights__SWIG_0(swigCPtr, SWIGTYPE_p_int.getCPtr(num_weights));
    SWIGTYPE_p_double ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double[] get_subkernel_weights() {
		IntPtr ptr = modshogunPINVOKE.CombinedKernel_get_subkernel_weights__SWIG_1(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
		int[] size = new int[1];
		Marshal.Copy(ptr, size, 0, 1);

		int len = size[0];

		double[] ret = new double[len];

		Marshal.Copy(new IntPtr(ptr.ToInt64() + Marshal.SizeOf(typeof(int))), ret, 0, len);
		return ret;
}

  public bool precompute_subkernels() {
    bool ret = modshogunPINVOKE.CombinedKernel_precompute_subkernels(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CombinedKernel KernelToCombinedKernel(Kernel n) {
    IntPtr cPtr = modshogunPINVOKE.CombinedKernel_KernelToCombinedKernel(swigCPtr, Kernel.getCPtr(n));
    CombinedKernel ret = (cPtr == IntPtr.Zero) ? null : new CombinedKernel(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
