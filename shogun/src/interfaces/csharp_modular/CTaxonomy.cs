/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class CTaxonomy : SGObject {
  private HandleRef swigCPtr;

  internal CTaxonomy(IntPtr cPtr, bool cMemoryOwn) : base(modshogunPINVOKE.CTaxonomyUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(CTaxonomy obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CTaxonomy() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          modshogunPINVOKE.delete_CTaxonomy(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public CTaxonomy() : this(modshogunPINVOKE.new_CTaxonomy(), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_root_beta(double beta) {
    modshogunPINVOKE.CTaxonomy_set_root_beta(swigCPtr, beta);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public int get_id(SWIGTYPE_p_std__string name) {
    int ret = modshogunPINVOKE.CTaxonomy_get_id(swigCPtr, SWIGTYPE_p_std__string.getCPtr(name));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double compute_node_similarity(int task_lhs, int task_rhs) {
    double ret = modshogunPINVOKE.CTaxonomy_compute_node_similarity(swigCPtr, task_lhs, task_rhs);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void update_task_histogram(SWIGTYPE_p_std__vectorT_int_t task_vector_lhs) {
    modshogunPINVOKE.CTaxonomy_update_task_histogram(swigCPtr, SWIGTYPE_p_std__vectorT_int_t.getCPtr(task_vector_lhs));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public int get_num_nodes() {
    int ret = modshogunPINVOKE.CTaxonomy_get_num_nodes(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int get_num_leaves() {
    int ret = modshogunPINVOKE.CTaxonomy_get_num_leaves(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double get_node_weight(int idx) {
    double ret = modshogunPINVOKE.CTaxonomy_get_node_weight(swigCPtr, idx);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_node_weight(int idx, double weight) {
    modshogunPINVOKE.CTaxonomy_set_node_weight(swigCPtr, idx, weight);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__mapT_std__string_int_t get_name2id() {
    SWIGTYPE_p_std__mapT_std__string_int_t ret = new SWIGTYPE_p_std__mapT_std__string_int_t(modshogunPINVOKE.CTaxonomy_get_name2id(swigCPtr), true);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int get_id_by_name(SWIGTYPE_p_std__string name) {
    int ret = modshogunPINVOKE.CTaxonomy_get_id_by_name(swigCPtr, SWIGTYPE_p_std__string.getCPtr(name));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
