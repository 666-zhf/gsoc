/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class MultitaskKernelTreeNormalizer : MultitaskKernelMklNormalizer {
  private HandleRef swigCPtr;

  internal MultitaskKernelTreeNormalizer(IntPtr cPtr, bool cMemoryOwn) : base(modshogunPINVOKE.MultitaskKernelTreeNormalizerUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(MultitaskKernelTreeNormalizer obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~MultitaskKernelTreeNormalizer() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          modshogunPINVOKE.delete_MultitaskKernelTreeNormalizer(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public MultitaskKernelTreeNormalizer() : this(modshogunPINVOKE.new_MultitaskKernelTreeNormalizer__SWIG_0(), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public MultitaskKernelTreeNormalizer(SWIGTYPE_p_std__vectorT_std__string_t task_lhs, SWIGTYPE_p_std__vectorT_std__string_t task_rhs, CTaxonomy tax) : this(modshogunPINVOKE.new_MultitaskKernelTreeNormalizer__SWIG_1(SWIGTYPE_p_std__vectorT_std__string_t.getCPtr(task_lhs), SWIGTYPE_p_std__vectorT_std__string_t.getCPtr(task_rhs), CTaxonomy.getCPtr(tax)), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void update_cache() {
    modshogunPINVOKE.MultitaskKernelTreeNormalizer_update_cache(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_task_vector_lhs(SWIGTYPE_p_std__vectorT_std__string_t vec) {
    modshogunPINVOKE.MultitaskKernelTreeNormalizer_set_task_vector_lhs(swigCPtr, SWIGTYPE_p_std__vectorT_std__string_t.getCPtr(vec));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_task_vector_rhs(SWIGTYPE_p_std__vectorT_std__string_t vec) {
    modshogunPINVOKE.MultitaskKernelTreeNormalizer_set_task_vector_rhs(swigCPtr, SWIGTYPE_p_std__vectorT_std__string_t.getCPtr(vec));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_task_vector(SWIGTYPE_p_std__vectorT_std__string_t vec) {
    modshogunPINVOKE.MultitaskKernelTreeNormalizer_set_task_vector(swigCPtr, SWIGTYPE_p_std__vectorT_std__string_t.getCPtr(vec));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public double get_node_similarity(int node_lhs, int node_rhs) {
    double ret = modshogunPINVOKE.MultitaskKernelTreeNormalizer_get_node_similarity(swigCPtr, node_lhs, node_rhs);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_node_similarity(int node_lhs, int node_rhs, double similarity) {
    modshogunPINVOKE.MultitaskKernelTreeNormalizer_set_node_similarity(swigCPtr, node_lhs, node_rhs, similarity);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public MultitaskKernelTreeNormalizer KernelNormalizerToMultitaskKernelTreeNormalizer(KernelNormalizer n) {
    IntPtr cPtr = modshogunPINVOKE.MultitaskKernelTreeNormalizer_KernelNormalizerToMultitaskKernelTreeNormalizer(swigCPtr, KernelNormalizer.getCPtr(n));
    MultitaskKernelTreeNormalizer ret = (cPtr == IntPtr.Zero) ? null : new MultitaskKernelTreeNormalizer(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
