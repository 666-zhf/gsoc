/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class PlifArray : PlifBase {
  private HandleRef swigCPtr;

  internal PlifArray(IntPtr cPtr, bool cMemoryOwn) : base(modshogunPINVOKE.PlifArrayUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(PlifArray obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PlifArray() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          modshogunPINVOKE.delete_PlifArray(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public PlifArray() : this(modshogunPINVOKE.new_PlifArray(), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void add_plif(PlifBase new_plif) {
    modshogunPINVOKE.PlifArray_add_plif(swigCPtr, PlifBase.getCPtr(new_plif));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clear() {
    modshogunPINVOKE.PlifArray_clear(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public int get_num_plifs() {
    int ret = modshogunPINVOKE.PlifArray_get_num_plifs(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double lookup_penalty(double p_value, SWIGTYPE_p_double svm_values) {
    double ret = modshogunPINVOKE.PlifArray_lookup_penalty__SWIG_0(swigCPtr, p_value, SWIGTYPE_p_double.getCPtr(svm_values));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double lookup_penalty(int p_value, SWIGTYPE_p_double svm_values) {
    double ret = modshogunPINVOKE.PlifArray_lookup_penalty__SWIG_1(swigCPtr, p_value, SWIGTYPE_p_double.getCPtr(svm_values));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
