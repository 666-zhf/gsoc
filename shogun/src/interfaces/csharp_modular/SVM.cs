/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class SVM : KernelMachine {
  private HandleRef swigCPtr;

  internal SVM(IntPtr cPtr, bool cMemoryOwn) : base(modshogunPINVOKE.SVMUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(SVM obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~SVM() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          modshogunPINVOKE.delete_SVM(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public SVM(int num_sv) : this(modshogunPINVOKE.new_SVM__SWIG_0(num_sv), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public SVM() : this(modshogunPINVOKE.new_SVM__SWIG_1(), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public SVM(double C, Kernel k, Labels lab) : this(modshogunPINVOKE.new_SVM__SWIG_2(C, Kernel.getCPtr(k), Labels.getCPtr(lab)), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_defaults(int num_sv) {
    modshogunPINVOKE.SVM_set_defaults__SWIG_0(swigCPtr, num_sv);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_defaults() {
    modshogunPINVOKE.SVM_set_defaults__SWIG_1(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual double[] get_linear_term() {
		IntPtr ptr = modshogunPINVOKE.SVM_get_linear_term(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
		int[] size = new int[1];
		Marshal.Copy(ptr, size, 0, 1);

		int len = size[0];

		double[] ret = new double[len];

		Marshal.Copy(new IntPtr(ptr.ToInt64() + Marshal.SizeOf(typeof(int))), ret, 0, len);
		return ret;
}

  public virtual void set_linear_term(double[] linear_term) {
    modshogunPINVOKE.SVM_set_linear_term(swigCPtr, linear_term.Length, linear_term);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_nu(double nue) {
    modshogunPINVOKE.SVM_set_nu(swigCPtr, nue);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_C(double c_neg, double c_pos) {
    modshogunPINVOKE.SVM_set_C(swigCPtr, c_neg, c_pos);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_epsilon(double eps) {
    modshogunPINVOKE.SVM_set_epsilon(swigCPtr, eps);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_tube_epsilon(double eps) {
    modshogunPINVOKE.SVM_set_tube_epsilon(swigCPtr, eps);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public double get_tube_epsilon() {
    double ret = modshogunPINVOKE.SVM_get_tube_epsilon(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_qpsize(int qps) {
    modshogunPINVOKE.SVM_set_qpsize(swigCPtr, qps);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public double get_epsilon() {
    double ret = modshogunPINVOKE.SVM_get_epsilon(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double get_nu() {
    double ret = modshogunPINVOKE.SVM_get_nu(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double get_C1() {
    double ret = modshogunPINVOKE.SVM_get_C1(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double get_C2() {
    double ret = modshogunPINVOKE.SVM_get_C2(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int get_qpsize() {
    int ret = modshogunPINVOKE.SVM_get_qpsize(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_shrinking_enabled(bool enable) {
    modshogunPINVOKE.SVM_set_shrinking_enabled(swigCPtr, enable);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool get_shrinking_enabled() {
    bool ret = modshogunPINVOKE.SVM_get_shrinking_enabled(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double compute_svm_dual_objective() {
    double ret = modshogunPINVOKE.SVM_compute_svm_dual_objective(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double compute_svm_primal_objective() {
    double ret = modshogunPINVOKE.SVM_compute_svm_primal_objective(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_objective(double v) {
    modshogunPINVOKE.SVM_set_objective(swigCPtr, v);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public double get_objective() {
    double ret = modshogunPINVOKE.SVM_get_objective(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_callback_function(MKL m, SWIGTYPE_p_f_p_shogun__CMKL_p_q_const__double_q_const__double__bool cb) {
    modshogunPINVOKE.SVM_set_callback_function(swigCPtr, MKL.getCPtr(m), SWIGTYPE_p_f_p_shogun__CMKL_p_q_const__double_q_const__double__bool.getCPtr(cb));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

}
