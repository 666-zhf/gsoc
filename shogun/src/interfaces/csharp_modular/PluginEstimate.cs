/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class PluginEstimate : Machine {
  private HandleRef swigCPtr;

  internal PluginEstimate(IntPtr cPtr, bool cMemoryOwn) : base(modshogunPINVOKE.PluginEstimateUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(PluginEstimate obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PluginEstimate() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          modshogunPINVOKE.delete_PluginEstimate(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public PluginEstimate(double pos_pseudo, double neg_pseudo) : this(modshogunPINVOKE.new_PluginEstimate__SWIG_0(pos_pseudo, neg_pseudo), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public PluginEstimate(double pos_pseudo) : this(modshogunPINVOKE.new_PluginEstimate__SWIG_1(pos_pseudo), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public PluginEstimate() : this(modshogunPINVOKE.new_PluginEstimate__SWIG_2(), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public override Labels apply() {
    IntPtr cPtr = modshogunPINVOKE.PluginEstimate_apply__SWIG_0(swigCPtr);
    Labels ret = (cPtr == IntPtr.Zero) ? null : new Labels(cPtr, true);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override Labels apply(Features data) {
    IntPtr cPtr = modshogunPINVOKE.PluginEstimate_apply__SWIG_1(swigCPtr, Features.getCPtr(data));
    Labels ret = (cPtr == IntPtr.Zero) ? null : new Labels(cPtr, true);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void set_features(StringWordFeatures feat) {
    modshogunPINVOKE.PluginEstimate_set_features(swigCPtr, StringWordFeatures.getCPtr(feat));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual StringWordFeatures get_features() {
    IntPtr cPtr = modshogunPINVOKE.PluginEstimate_get_features(swigCPtr);
    StringWordFeatures ret = (cPtr == IntPtr.Zero) ? null : new StringWordFeatures(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double apply(int vec_idx) {
    double ret = modshogunPINVOKE.PluginEstimate_apply__SWIG_2(swigCPtr, vec_idx);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double posterior_log_odds_obsolete(SWIGTYPE_p_unsigned_short vector, int len) {
    double ret = modshogunPINVOKE.PluginEstimate_posterior_log_odds_obsolete(swigCPtr, SWIGTYPE_p_unsigned_short.getCPtr(vector), len);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double get_parameterwise_log_odds(ushort obs, int position) {
    double ret = modshogunPINVOKE.PluginEstimate_get_parameterwise_log_odds(swigCPtr, obs, position);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double log_derivative_pos_obsolete(ushort obs, int pos) {
    double ret = modshogunPINVOKE.PluginEstimate_log_derivative_pos_obsolete(swigCPtr, obs, pos);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double log_derivative_neg_obsolete(ushort obs, int pos) {
    double ret = modshogunPINVOKE.PluginEstimate_log_derivative_neg_obsolete(swigCPtr, obs, pos);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool get_model_params(SWIGTYPE_p_double pos_params, SWIGTYPE_p_double neg_params, SWIGTYPE_p_int seq_length, SWIGTYPE_p_int num_symbols) {
    bool ret = modshogunPINVOKE.PluginEstimate_get_model_params(swigCPtr, SWIGTYPE_p_double.getCPtr(pos_params), SWIGTYPE_p_double.getCPtr(neg_params), SWIGTYPE_p_int.getCPtr(seq_length), SWIGTYPE_p_int.getCPtr(num_symbols));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_model_params(SWIGTYPE_p_double pos_params, SWIGTYPE_p_double neg_params, int seq_length, int num_symbols) {
    modshogunPINVOKE.PluginEstimate_set_model_params(swigCPtr, SWIGTYPE_p_double.getCPtr(pos_params), SWIGTYPE_p_double.getCPtr(neg_params), seq_length, num_symbols);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public int get_num_params() {
    int ret = modshogunPINVOKE.PluginEstimate_get_num_params(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool check_models() {
    bool ret = modshogunPINVOKE.PluginEstimate_check_models(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
