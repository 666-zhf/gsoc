/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class Hash : SGObject {
  private HandleRef swigCPtr;

  internal Hash(IntPtr cPtr, bool cMemoryOwn) : base(modshogunPINVOKE.HashUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Hash obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Hash() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          modshogunPINVOKE.delete_Hash(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Hash() : this(modshogunPINVOKE.new_Hash(), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public static uint crc32(SWIGTYPE_p_unsigned_char data, int len) {
    uint ret = modshogunPINVOKE.Hash_crc32(SWIGTYPE_p_unsigned_char.getCPtr(data), len);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void MD5(SWIGTYPE_p_unsigned_char x, uint l, SWIGTYPE_p_unsigned_char buf) {
    modshogunPINVOKE.Hash_MD5(SWIGTYPE_p_unsigned_char.getCPtr(x), l, SWIGTYPE_p_unsigned_char.getCPtr(buf));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public static uint MurmurHash2(SWIGTYPE_p_unsigned_char data, int len, uint seed) {
    uint ret = modshogunPINVOKE.Hash_MurmurHash2(SWIGTYPE_p_unsigned_char.getCPtr(data), len, seed);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint IncrementalMurmurHash2(byte data, uint h) {
    uint ret = modshogunPINVOKE.Hash_IncrementalMurmurHash2(data, h);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint MurmurHashString(SWIGTYPE_p_shogun__substring s, uint h) {
    uint ret = modshogunPINVOKE.Hash_MurmurHashString(SWIGTYPE_p_shogun__substring.getCPtr(s), h);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
