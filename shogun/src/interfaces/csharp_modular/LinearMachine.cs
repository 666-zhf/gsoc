/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class LinearMachine : Machine {
  private HandleRef swigCPtr;

  internal LinearMachine(IntPtr cPtr, bool cMemoryOwn) : base(modshogunPINVOKE.LinearMachineUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(LinearMachine obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~LinearMachine() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          modshogunPINVOKE.delete_LinearMachine(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public LinearMachine() : this(modshogunPINVOKE.new_LinearMachine(), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void get_w(SWIGTYPE_p_double dst_w, SWIGTYPE_p_int dst_dims) {
    modshogunPINVOKE.LinearMachine_get_w__SWIG_0(swigCPtr, SWIGTYPE_p_double.getCPtr(dst_w), SWIGTYPE_p_int.getCPtr(dst_dims));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public double[] get_w() {
		IntPtr ptr = modshogunPINVOKE.LinearMachine_get_w__SWIG_1(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
		int[] size = new int[1];
		Marshal.Copy(ptr, size, 0, 1);

		int len = size[0];

		double[] ret = new double[len];

		Marshal.Copy(new IntPtr(ptr.ToInt64() + Marshal.SizeOf(typeof(int))), ret, 0, len);
		return ret;
}

  public void set_w(double[] src_w) {
    modshogunPINVOKE.LinearMachine_set_w(swigCPtr, src_w.Length, src_w);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_bias(double b) {
    modshogunPINVOKE.LinearMachine_set_bias(swigCPtr, b);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public double get_bias() {
    double ret = modshogunPINVOKE.LinearMachine_get_bias(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void set_features(DotFeatures feat) {
    modshogunPINVOKE.LinearMachine_set_features(swigCPtr, DotFeatures.getCPtr(feat));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public override Labels apply() {
    IntPtr cPtr = modshogunPINVOKE.LinearMachine_apply__SWIG_0(swigCPtr);
    Labels ret = (cPtr == IntPtr.Zero) ? null : new Labels(cPtr, true);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override Labels apply(Features data) {
    IntPtr cPtr = modshogunPINVOKE.LinearMachine_apply__SWIG_1(swigCPtr, Features.getCPtr(data));
    Labels ret = (cPtr == IntPtr.Zero) ? null : new Labels(cPtr, true);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double apply(int vec_idx) {
    double ret = modshogunPINVOKE.LinearMachine_apply__SWIG_2(swigCPtr, vec_idx);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DotFeatures get_features() {
    IntPtr cPtr = modshogunPINVOKE.LinearMachine_get_features(swigCPtr);
    DotFeatures ret = (cPtr == IntPtr.Zero) ? null : new DotFeatures(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
