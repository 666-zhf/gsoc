/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class GaussianNaiveBayes : Machine {
  private HandleRef swigCPtr;

  internal GaussianNaiveBayes(IntPtr cPtr, bool cMemoryOwn) : base(modshogunPINVOKE.GaussianNaiveBayesUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(GaussianNaiveBayes obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~GaussianNaiveBayes() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          modshogunPINVOKE.delete_GaussianNaiveBayes(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public GaussianNaiveBayes() : this(modshogunPINVOKE.new_GaussianNaiveBayes__SWIG_0(), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public GaussianNaiveBayes(Features train_examples, Labels train_labels) : this(modshogunPINVOKE.new_GaussianNaiveBayes__SWIG_1(Features.getCPtr(train_examples), Labels.getCPtr(train_labels)), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void set_features(DotFeatures features) {
    modshogunPINVOKE.GaussianNaiveBayes_set_features(swigCPtr, DotFeatures.getCPtr(features));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual DotFeatures get_features() {
    IntPtr cPtr = modshogunPINVOKE.GaussianNaiveBayes_get_features(swigCPtr);
    DotFeatures ret = (cPtr == IntPtr.Zero) ? null : new DotFeatures(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool train(Features data) {
    bool ret = modshogunPINVOKE.GaussianNaiveBayes_train__SWIG_0(swigCPtr, Features.getCPtr(data));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool train() {
    bool ret = modshogunPINVOKE.GaussianNaiveBayes_train__SWIG_1(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override Labels apply() {
    IntPtr cPtr = modshogunPINVOKE.GaussianNaiveBayes_apply__SWIG_0(swigCPtr);
    Labels ret = (cPtr == IntPtr.Zero) ? null : new Labels(cPtr, true);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override Labels apply(Features data) {
    IntPtr cPtr = modshogunPINVOKE.GaussianNaiveBayes_apply__SWIG_1(swigCPtr, Features.getCPtr(data));
    Labels ret = (cPtr == IntPtr.Zero) ? null : new Labels(cPtr, true);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double apply(int idx) {
    double ret = modshogunPINVOKE.GaussianNaiveBayes_apply__SWIG_2(swigCPtr, idx);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
