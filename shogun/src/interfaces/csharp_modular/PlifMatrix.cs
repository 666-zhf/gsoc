/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class PlifMatrix : SGObject {
  private HandleRef swigCPtr;

  internal PlifMatrix(IntPtr cPtr, bool cMemoryOwn) : base(modshogunPINVOKE.PlifMatrixUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(PlifMatrix obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PlifMatrix() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          modshogunPINVOKE.delete_PlifMatrix(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public PlifMatrix() : this(modshogunPINVOKE.new_PlifMatrix(), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_p_shogun__CPlif get_PEN() {
    IntPtr cPtr = modshogunPINVOKE.PlifMatrix_get_PEN(swigCPtr);
    SWIGTYPE_p_p_shogun__CPlif ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_p_shogun__CPlif(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_p_shogun__CPlifBase get_plif_matrix() {
    IntPtr cPtr = modshogunPINVOKE.PlifMatrix_get_plif_matrix(swigCPtr);
    SWIGTYPE_p_p_shogun__CPlifBase ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_p_shogun__CPlifBase(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int get_num_states() {
    int ret = modshogunPINVOKE.PlifMatrix_get_num_states(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_p_shogun__CPlifBase get_state_signals() {
    IntPtr cPtr = modshogunPINVOKE.PlifMatrix_get_state_signals(swigCPtr);
    SWIGTYPE_p_p_shogun__CPlifBase ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_p_shogun__CPlifBase(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int get_num_plifs() {
    int ret = modshogunPINVOKE.PlifMatrix_get_num_plifs(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int get_num_limits() {
    int ret = modshogunPINVOKE.PlifMatrix_get_num_limits(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void create_plifs(int num_plifs, int num_limits) {
    modshogunPINVOKE.PlifMatrix_create_plifs(swigCPtr, num_plifs, num_limits);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_plif_ids(int[] ids) {
    modshogunPINVOKE.PlifMatrix_set_plif_ids(swigCPtr, ids.Length, ids);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_plif_min_values(double[] min_values) {
    modshogunPINVOKE.PlifMatrix_set_plif_min_values(swigCPtr, min_values.Length, min_values);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_plif_max_values(double[] max_values) {
    modshogunPINVOKE.PlifMatrix_set_plif_max_values(swigCPtr, max_values.Length, max_values);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_plif_use_cache(BoolVector use_cache) {
    modshogunPINVOKE.PlifMatrix_set_plif_use_cache(swigCPtr, BoolVector.getCPtr(use_cache));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_plif_use_svm(int[] use_svm) {
    modshogunPINVOKE.PlifMatrix_set_plif_use_svm(swigCPtr, use_svm.Length, use_svm);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_plif_limits(double[,] limits) {
    modshogunPINVOKE.PlifMatrix_set_plif_limits(swigCPtr, limits.GetLength(0), limits.GetLength(1), limits);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_plif_penalties(double[,] penalties) {
    modshogunPINVOKE.PlifMatrix_set_plif_penalties(swigCPtr, penalties.GetLength(0), penalties.GetLength(1), penalties);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_plif_names(SWIGTYPE_p_shogun__SGStringT_char_t names, int num_values, int maxlen) {
    modshogunPINVOKE.PlifMatrix_set_plif_names__SWIG_0(swigCPtr, SWIGTYPE_p_shogun__SGStringT_char_t.getCPtr(names), num_values, maxlen);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_plif_names(SWIGTYPE_p_shogun__SGStringT_char_t names, int num_values) {
    modshogunPINVOKE.PlifMatrix_set_plif_names__SWIG_1(swigCPtr, SWIGTYPE_p_shogun__SGStringT_char_t.getCPtr(names), num_values);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_plif_transform_type(SWIGTYPE_p_shogun__SGStringT_char_t transform_type, int num_values, int maxlen) {
    modshogunPINVOKE.PlifMatrix_set_plif_transform_type__SWIG_0(swigCPtr, SWIGTYPE_p_shogun__SGStringT_char_t.getCPtr(transform_type), num_values, maxlen);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_plif_transform_type(SWIGTYPE_p_shogun__SGStringT_char_t transform_type, int num_values) {
    modshogunPINVOKE.PlifMatrix_set_plif_transform_type__SWIG_1(swigCPtr, SWIGTYPE_p_shogun__SGStringT_char_t.getCPtr(transform_type), num_values);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public int get_plif_id(int idx) {
    int ret = modshogunPINVOKE.PlifMatrix_get_plif_id(swigCPtr, idx);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool compute_plif_matrix(RealNDArray penalties_array) {
    bool ret = modshogunPINVOKE.PlifMatrix_compute_plif_matrix(swigCPtr, RealNDArray.getCPtr(penalties_array));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool compute_signal_plifs(int[,] state_signals) {
    bool ret = modshogunPINVOKE.PlifMatrix_compute_signal_plifs(swigCPtr, state_signals.GetLength(0), state_signals.GetLength(1), state_signals);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_plif_state_signal_matrix(SWIGTYPE_p_int plif_id_matrix, int m, int n) {
    modshogunPINVOKE.PlifMatrix_set_plif_state_signal_matrix(swigCPtr, SWIGTYPE_p_int.getCPtr(plif_id_matrix), m, n);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

}
