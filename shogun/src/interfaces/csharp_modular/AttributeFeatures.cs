/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class AttributeFeatures : Features {
  private HandleRef swigCPtr;

  internal AttributeFeatures(IntPtr cPtr, bool cMemoryOwn) : base(modshogunPINVOKE.AttributeFeaturesUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(AttributeFeatures obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~AttributeFeatures() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          modshogunPINVOKE.delete_AttributeFeatures(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Features get_attribute(string attr_name) {
    IntPtr cPtr = modshogunPINVOKE.AttributeFeatures_get_attribute(swigCPtr, attr_name);
    Features ret = (cPtr == IntPtr.Zero) ? null : new Features(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void get_attribute_by_index(int idx, string attr_name, Features attr_obj) {
    modshogunPINVOKE.AttributeFeatures_get_attribute_by_index(swigCPtr, idx, attr_name, Features.getCPtr(attr_obj));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool set_attribute(string attr_name, Features attr_obj) {
    bool ret = modshogunPINVOKE.AttributeFeatures_set_attribute(swigCPtr, attr_name, Features.getCPtr(attr_obj));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool del_attribute(string attr_name) {
    bool ret = modshogunPINVOKE.AttributeFeatures_del_attribute(swigCPtr, attr_name);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int get_num_attributes() {
    int ret = modshogunPINVOKE.AttributeFeatures_get_num_attributes(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
