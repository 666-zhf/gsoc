/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class SpectrumMismatchRBFKernel : StringCharKernel {
  private HandleRef swigCPtr;

  internal SpectrumMismatchRBFKernel(IntPtr cPtr, bool cMemoryOwn) : base(modshogunPINVOKE.SpectrumMismatchRBFKernelUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(SpectrumMismatchRBFKernel obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~SpectrumMismatchRBFKernel() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          modshogunPINVOKE.delete_SpectrumMismatchRBFKernel(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public SpectrumMismatchRBFKernel() : this(modshogunPINVOKE.new_SpectrumMismatchRBFKernel__SWIG_0(), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public SpectrumMismatchRBFKernel(int size, SWIGTYPE_p_double AA_matrix_, int nr_, int nc_, int degree, int max_mismatch, double width) : this(modshogunPINVOKE.new_SpectrumMismatchRBFKernel__SWIG_1(size, SWIGTYPE_p_double.getCPtr(AA_matrix_), nr_, nc_, degree, max_mismatch, width), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public SpectrumMismatchRBFKernel(StringCharFeatures l, StringCharFeatures r, int size, SWIGTYPE_p_double AA_matrix_, int nr_, int nc_, int degree, int max_mismatch, double width) : this(modshogunPINVOKE.new_SpectrumMismatchRBFKernel__SWIG_2(StringCharFeatures.getCPtr(l), StringCharFeatures.getCPtr(r), size, SWIGTYPE_p_double.getCPtr(AA_matrix_), nr_, nc_, degree, max_mismatch, width), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool set_max_mismatch(int max) {
    bool ret = modshogunPINVOKE.SpectrumMismatchRBFKernel_set_max_mismatch(swigCPtr, max);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int get_max_mismatch() {
    int ret = modshogunPINVOKE.SpectrumMismatchRBFKernel_get_max_mismatch(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool set_degree(int deg) {
    bool ret = modshogunPINVOKE.SpectrumMismatchRBFKernel_set_degree(swigCPtr, deg);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int get_degree() {
    int ret = modshogunPINVOKE.SpectrumMismatchRBFKernel_get_degree(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool set_AA_matrix(SWIGTYPE_p_double AA_matrix_, int nr, int nc) {
    bool ret = modshogunPINVOKE.SpectrumMismatchRBFKernel_set_AA_matrix__SWIG_0(swigCPtr, SWIGTYPE_p_double.getCPtr(AA_matrix_), nr, nc);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool set_AA_matrix(SWIGTYPE_p_double AA_matrix_, int nr) {
    bool ret = modshogunPINVOKE.SpectrumMismatchRBFKernel_set_AA_matrix__SWIG_1(swigCPtr, SWIGTYPE_p_double.getCPtr(AA_matrix_), nr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool set_AA_matrix(SWIGTYPE_p_double AA_matrix_) {
    bool ret = modshogunPINVOKE.SpectrumMismatchRBFKernel_set_AA_matrix__SWIG_2(swigCPtr, SWIGTYPE_p_double.getCPtr(AA_matrix_));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool set_AA_matrix() {
    bool ret = modshogunPINVOKE.SpectrumMismatchRBFKernel_set_AA_matrix__SWIG_3(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
