/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class Features : SGObject {
  private HandleRef swigCPtr;

  internal Features(IntPtr cPtr, bool cMemoryOwn) : base(modshogunPINVOKE.FeaturesUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Features obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Features() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          modshogunPINVOKE.delete_Features(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public virtual Features duplicate() {
    IntPtr cPtr = modshogunPINVOKE.Features_duplicate(swigCPtr);
    Features ret = (cPtr == IntPtr.Zero) ? null : new Features(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual EFeatureType get_feature_type() {
    EFeatureType ret = (EFeatureType)modshogunPINVOKE.Features_get_feature_type(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual EFeatureClass get_feature_class() {
    EFeatureClass ret = (EFeatureClass)modshogunPINVOKE.Features_get_feature_class(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int add_preprocessor(Preprocessor p) {
    int ret = modshogunPINVOKE.Features_add_preprocessor(swigCPtr, Preprocessor.getCPtr(p));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Preprocessor del_preprocessor(int num) {
    IntPtr cPtr = modshogunPINVOKE.Features_del_preprocessor(swigCPtr, num);
    Preprocessor ret = (cPtr == IntPtr.Zero) ? null : new Preprocessor(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Preprocessor get_preprocessor(int num) {
    IntPtr cPtr = modshogunPINVOKE.Features_get_preprocessor(swigCPtr, num);
    Preprocessor ret = (cPtr == IntPtr.Zero) ? null : new Preprocessor(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_preprocessed(int num) {
    modshogunPINVOKE.Features_set_preprocessed(swigCPtr, num);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool is_preprocessed(int num) {
    bool ret = modshogunPINVOKE.Features_is_preprocessed(swigCPtr, num);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int get_num_preprocessed() {
    int ret = modshogunPINVOKE.Features_get_num_preprocessed(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int get_num_preprocessors() {
    int ret = modshogunPINVOKE.Features_get_num_preprocessors(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void clean_preprocessors() {
    modshogunPINVOKE.Features_clean_preprocessors(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public int get_cache_size() {
    int ret = modshogunPINVOKE.Features_get_cache_size(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int get_num_vectors() {
    int ret = modshogunPINVOKE.Features_get_num_vectors(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool reshape(int num_features, int num_vectors) {
    bool ret = modshogunPINVOKE.Features_reshape(swigCPtr, num_features, num_vectors);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int get_size() {
    int ret = modshogunPINVOKE.Features_get_size(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void list_feature_obj() {
    modshogunPINVOKE.Features_list_feature_obj(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void load(File loader) {
    modshogunPINVOKE.Features_load(swigCPtr, File.getCPtr(loader));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void save(File writer) {
    modshogunPINVOKE.Features_save(swigCPtr, File.getCPtr(writer));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool check_feature_compatibility(Features f) {
    bool ret = modshogunPINVOKE.Features_check_feature_compatibility(swigCPtr, Features.getCPtr(f));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool has_property(EFeatureProperty p) {
    bool ret = modshogunPINVOKE.Features_has_property(swigCPtr, (int)p);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_property(EFeatureProperty p) {
    modshogunPINVOKE.Features_set_property(swigCPtr, (int)p);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void unset_property(EFeatureProperty p) {
    modshogunPINVOKE.Features_unset_property(swigCPtr, (int)p);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void set_subset(SWIGTYPE_p_CSubset subset) {
    modshogunPINVOKE.Features_set_subset(swigCPtr, SWIGTYPE_p_CSubset.getCPtr(subset));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void remove_subset() {
    modshogunPINVOKE.Features_remove_subset(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void subset_changed_post() {
    modshogunPINVOKE.Features_subset_changed_post(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public int subset_idx_conversion(int idx) {
    int ret = modshogunPINVOKE.Features_subset_idx_conversion(swigCPtr, idx);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool has_subset() {
    bool ret = modshogunPINVOKE.Features_has_subset(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual Features copy_subset(int[] indices) {
    IntPtr cPtr = modshogunPINVOKE.Features_copy_subset(swigCPtr, indices.Length, indices);
    Features ret = (cPtr == IntPtr.Zero) ? null : new Features(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
