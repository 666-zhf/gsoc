/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class IntronList : SGObject {
  private HandleRef swigCPtr;

  internal IntronList(IntPtr cPtr, bool cMemoryOwn) : base(modshogunPINVOKE.IntronListUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(IntronList obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~IntronList() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          modshogunPINVOKE.delete_IntronList(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public IntronList() : this(modshogunPINVOKE.new_IntronList(), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void init_list(SWIGTYPE_p_int all_pos, int len) {
    modshogunPINVOKE.IntronList_init_list(swigCPtr, SWIGTYPE_p_int.getCPtr(all_pos), len);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void read_introns(SWIGTYPE_p_int start_pos, SWIGTYPE_p_int end_pos, SWIGTYPE_p_int quality, int len) {
    modshogunPINVOKE.IntronList_read_introns(swigCPtr, SWIGTYPE_p_int.getCPtr(start_pos), SWIGTYPE_p_int.getCPtr(end_pos), SWIGTYPE_p_int.getCPtr(quality), len);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void get_intron_support(SWIGTYPE_p_int values, int from_pos, int to_pos) {
    modshogunPINVOKE.IntronList_get_intron_support(swigCPtr, SWIGTYPE_p_int.getCPtr(values), from_pos, to_pos);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

}
