/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class MKLMultiClass : MultiClassSVM {
  private HandleRef swigCPtr;

  internal MKLMultiClass(IntPtr cPtr, bool cMemoryOwn) : base(modshogunPINVOKE.MKLMultiClassUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(MKLMultiClass obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~MKLMultiClass() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          modshogunPINVOKE.delete_MKLMultiClass(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public MKLMultiClass() : this(modshogunPINVOKE.new_MKLMultiClass__SWIG_0(), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public MKLMultiClass(double C, Kernel k, Labels lab) : this(modshogunPINVOKE.new_MKLMultiClass__SWIG_1(C, Kernel.getCPtr(k), Labels.getCPtr(lab)), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_double getsubkernelweights(SWIGTYPE_p_int numweights) {
    IntPtr cPtr = modshogunPINVOKE.MKLMultiClass_getsubkernelweights(swigCPtr, SWIGTYPE_p_int.getCPtr(numweights));
    SWIGTYPE_p_double ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_mkl_epsilon(double eps) {
    modshogunPINVOKE.MKLMultiClass_set_mkl_epsilon(swigCPtr, eps);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_max_num_mkliters(int maxnum) {
    modshogunPINVOKE.MKLMultiClass_set_max_num_mkliters(swigCPtr, maxnum);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void set_mkl_norm(double norm) {
    modshogunPINVOKE.MKLMultiClass_set_mkl_norm(swigCPtr, norm);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

}
