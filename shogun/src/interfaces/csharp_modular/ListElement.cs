/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class ListElement : SGObject {
  private HandleRef swigCPtr;

  internal ListElement(IntPtr cPtr, bool cMemoryOwn) : base(modshogunPINVOKE.ListElementUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(ListElement obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~ListElement() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          modshogunPINVOKE.delete_ListElement(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public ListElement() : this(modshogunPINVOKE.new_ListElement__SWIG_0(), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public ListElement(SGObject p_data, ListElement p_prev, ListElement p_next) : this(modshogunPINVOKE.new_ListElement__SWIG_1(SGObject.getCPtr(p_data), ListElement.getCPtr(p_prev), ListElement.getCPtr(p_next)), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public ListElement(SGObject p_data, ListElement p_prev) : this(modshogunPINVOKE.new_ListElement__SWIG_2(SGObject.getCPtr(p_data), ListElement.getCPtr(p_prev)), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public ListElement(SGObject p_data) : this(modshogunPINVOKE.new_ListElement__SWIG_3(SGObject.getCPtr(p_data)), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public ListElement next {
    set {
      modshogunPINVOKE.ListElement_next_set(swigCPtr, ListElement.getCPtr(value));
      if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      IntPtr cPtr = modshogunPINVOKE.ListElement_next_get(swigCPtr);
      ListElement ret = (cPtr == IntPtr.Zero) ? null : new ListElement(cPtr, false);
      if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ListElement prev {
    set {
      modshogunPINVOKE.ListElement_prev_set(swigCPtr, ListElement.getCPtr(value));
      if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      IntPtr cPtr = modshogunPINVOKE.ListElement_prev_get(swigCPtr);
      ListElement ret = (cPtr == IntPtr.Zero) ? null : new ListElement(cPtr, false);
      if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SGObject data {
    set {
      modshogunPINVOKE.ListElement_data_set(swigCPtr, SGObject.getCPtr(value));
      if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      IntPtr cPtr = modshogunPINVOKE.ListElement_data_get(swigCPtr);
      SGObject ret = (cPtr == IntPtr.Zero) ? null : new SGObject(cPtr, false);
      if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}
