/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class DimensionReductionPreprocessor : RealPreprocessor {
  private HandleRef swigCPtr;

  internal DimensionReductionPreprocessor(IntPtr cPtr, bool cMemoryOwn) : base(modshogunPINVOKE.DimensionReductionPreprocessorUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(DimensionReductionPreprocessor obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~DimensionReductionPreprocessor() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          modshogunPINVOKE.delete_DimensionReductionPreprocessor(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public DimensionReductionPreprocessor() : this(modshogunPINVOKE.new_DimensionReductionPreprocessor__SWIG_0(), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public DimensionReductionPreprocessor(EmbeddingConverter converter) : this(modshogunPINVOKE.new_DimensionReductionPreprocessor__SWIG_1(EmbeddingConverter.getCPtr(converter)), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_target_dim(int dim) {
    modshogunPINVOKE.DimensionReductionPreprocessor_set_target_dim(swigCPtr, dim);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public int get_target_dim() {
    int ret = modshogunPINVOKE.DimensionReductionPreprocessor_get_target_dim(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_distance(Distance distance) {
    modshogunPINVOKE.DimensionReductionPreprocessor_set_distance(swigCPtr, Distance.getCPtr(distance));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public Distance get_distance() {
    IntPtr cPtr = modshogunPINVOKE.DimensionReductionPreprocessor_get_distance(swigCPtr);
    Distance ret = (cPtr == IntPtr.Zero) ? null : new Distance(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_kernel(Kernel kernel) {
    modshogunPINVOKE.DimensionReductionPreprocessor_set_kernel(swigCPtr, Kernel.getCPtr(kernel));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public Kernel get_kernel() {
    IntPtr cPtr = modshogunPINVOKE.DimensionReductionPreprocessor_get_kernel(swigCPtr);
    Kernel ret = (cPtr == IntPtr.Zero) ? null : new Kernel(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
