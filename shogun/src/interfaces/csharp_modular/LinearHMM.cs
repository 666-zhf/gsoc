/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class LinearHMM : Distribution {
  private HandleRef swigCPtr;

  internal LinearHMM(IntPtr cPtr, bool cMemoryOwn) : base(modshogunPINVOKE.LinearHMMUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(LinearHMM obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~LinearHMM() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          modshogunPINVOKE.delete_LinearHMM(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public LinearHMM() : this(modshogunPINVOKE.new_LinearHMM__SWIG_0(), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public LinearHMM(StringWordFeatures f) : this(modshogunPINVOKE.new_LinearHMM__SWIG_1(StringWordFeatures.getCPtr(f)), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public LinearHMM(int p_num_features, int p_num_symbols) : this(modshogunPINVOKE.new_LinearHMM__SWIG_2(p_num_features, p_num_symbols), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool train(Features data) {
    bool ret = modshogunPINVOKE.LinearHMM_train__SWIG_0(swigCPtr, Features.getCPtr(data));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool train() {
    bool ret = modshogunPINVOKE.LinearHMM_train__SWIG_1(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool train(SWIGTYPE_p_int indizes, int num_indizes, double pseudo_count) {
    bool ret = modshogunPINVOKE.LinearHMM_train__SWIG_2(swigCPtr, SWIGTYPE_p_int.getCPtr(indizes), num_indizes, pseudo_count);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double get_log_likelihood_example(SWIGTYPE_p_unsigned_short vector, int len) {
    double ret = modshogunPINVOKE.LinearHMM_get_log_likelihood_example__SWIG_0(swigCPtr, SWIGTYPE_p_unsigned_short.getCPtr(vector), len);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double get_likelihood_example(SWIGTYPE_p_unsigned_short vector, int len) {
    double ret = modshogunPINVOKE.LinearHMM_get_likelihood_example(swigCPtr, SWIGTYPE_p_unsigned_short.getCPtr(vector), len);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double get_log_likelihood_example(int num_example) {
    double ret = modshogunPINVOKE.LinearHMM_get_log_likelihood_example__SWIG_1(swigCPtr, num_example);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double get_log_derivative_obsolete(ushort obs, int pos) {
    double ret = modshogunPINVOKE.LinearHMM_get_log_derivative_obsolete(swigCPtr, obs, pos);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double get_derivative_obsolete(SWIGTYPE_p_unsigned_short vector, int len, int pos) {
    double ret = modshogunPINVOKE.LinearHMM_get_derivative_obsolete(swigCPtr, SWIGTYPE_p_unsigned_short.getCPtr(vector), len, pos);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int get_sequence_length() {
    int ret = modshogunPINVOKE.LinearHMM_get_sequence_length(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int get_num_symbols() {
    int ret = modshogunPINVOKE.LinearHMM_get_num_symbols(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double get_positional_log_parameter(ushort obs, int position) {
    double ret = modshogunPINVOKE.LinearHMM_get_positional_log_parameter(swigCPtr, obs, position);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double[] get_log_transition_probs() {
		IntPtr ptr = modshogunPINVOKE.LinearHMM_get_log_transition_probs(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
		int[] size = new int[1];
		Marshal.Copy(ptr, size, 0, 1);

		int len = size[0];

		double[] ret = new double[len];

		Marshal.Copy(new IntPtr(ptr.ToInt64() + Marshal.SizeOf(typeof(int))), ret, 0, len);
		return ret;
}

  public virtual bool set_log_transition_probs(double[] probs) {
    bool ret = modshogunPINVOKE.LinearHMM_set_log_transition_probs(swigCPtr, probs.Length, probs);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double[] get_transition_probs() {
		IntPtr ptr = modshogunPINVOKE.LinearHMM_get_transition_probs(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
		int[] size = new int[1];
		Marshal.Copy(ptr, size, 0, 1);

		int len = size[0];

		double[] ret = new double[len];

		Marshal.Copy(new IntPtr(ptr.ToInt64() + Marshal.SizeOf(typeof(int))), ret, 0, len);
		return ret;
}

  public virtual bool set_transition_probs(double[] probs) {
    bool ret = modshogunPINVOKE.LinearHMM_set_transition_probs(swigCPtr, probs.Length, probs);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
