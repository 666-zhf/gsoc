/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class Math : SGObject {
  private HandleRef swigCPtr;

  internal Math(IntPtr cPtr, bool cMemoryOwn) : base(modshogunPINVOKE.MathUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Math obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Math() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          modshogunPINVOKE.delete_Math(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Math() : this(modshogunPINVOKE.new_Math(), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public static double round(double d) {
    double ret = modshogunPINVOKE.Math_round(d);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double floor(double d) {
    double ret = modshogunPINVOKE.Math_floor(d);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double ceil(double d) {
    double ret = modshogunPINVOKE.Math_ceil(d);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float sqrt(float x) {
    float ret = modshogunPINVOKE.Math_sqrt__SWIG_0(x);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double sqrt(double x) {
    double ret = modshogunPINVOKE.Math_sqrt__SWIG_1(x);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_long_double sqrt(SWIGTYPE_p_long_double x) {
    SWIGTYPE_p_long_double ret = new SWIGTYPE_p_long_double(modshogunPINVOKE.Math_sqrt__SWIG_2(SWIGTYPE_p_long_double.getCPtr(x)), true);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float invsqrt(float x) {
    float ret = modshogunPINVOKE.Math_invsqrt(x);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_long_double powl(SWIGTYPE_p_long_double x, SWIGTYPE_p_long_double n) {
    SWIGTYPE_p_long_double ret = new SWIGTYPE_p_long_double(modshogunPINVOKE.Math_powl(SWIGTYPE_p_long_double.getCPtr(x), SWIGTYPE_p_long_double.getCPtr(n)), true);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int pow(int x, int n) {
    int ret = modshogunPINVOKE.Math_pow__SWIG_0(x, n);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double pow(double x, int n) {
    double ret = modshogunPINVOKE.Math_pow__SWIG_1(x, n);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double pow(double x, double n) {
    double ret = modshogunPINVOKE.Math_pow__SWIG_2(x, n);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double exp(double x) {
    double ret = modshogunPINVOKE.Math_exp(x);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double lgamma(double x) {
    double ret = modshogunPINVOKE.Math_lgamma(x);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double tgamma(double x) {
    double ret = modshogunPINVOKE.Math_tgamma(x);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double atan(double x) {
    double ret = modshogunPINVOKE.Math_atan(x);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_long_double lgammal(SWIGTYPE_p_long_double x) {
    SWIGTYPE_p_long_double ret = new SWIGTYPE_p_long_double(modshogunPINVOKE.Math_lgammal(SWIGTYPE_p_long_double.getCPtr(x)), true);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double log10(double v) {
    double ret = modshogunPINVOKE.Math_log10(v);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double log2(double v) {
    double ret = modshogunPINVOKE.Math_log2(v);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double log(double v) {
    double ret = modshogunPINVOKE.Math_log(v);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double area_under_curve(SWIGTYPE_p_double xy, int len, bool reversed) {
    double ret = modshogunPINVOKE.Math_area_under_curve(SWIGTYPE_p_double.getCPtr(xy), len, reversed);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static long factorial(int n) {
    long ret = modshogunPINVOKE.Math_factorial(n);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void init_random(uint initseed) {
    modshogunPINVOKE.Math_init_random__SWIG_0(initseed);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void init_random() {
    modshogunPINVOKE.Math_init_random__SWIG_1();
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public static long random() {
    long ret = modshogunPINVOKE.Math_random__SWIG_0();
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int random(int min_value, int max_value) {
    int ret = modshogunPINVOKE.Math_random__SWIG_1(min_value, max_value);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float random(float min_value, float max_value) {
    float ret = modshogunPINVOKE.Math_random__SWIG_2(min_value, max_value);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double random(double min_value, double max_value) {
    double ret = modshogunPINVOKE.Math_random__SWIG_3(min_value, max_value);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float normal_random(float mean, float std_dev) {
    float ret = modshogunPINVOKE.Math_normal_random__SWIG_0(mean, std_dev);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double normal_random(double mean, double std_dev) {
    double ret = modshogunPINVOKE.Math_normal_random__SWIG_1(mean, std_dev);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float randn_float() {
    float ret = modshogunPINVOKE.Math_randn_float();
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double randn_double() {
    double ret = modshogunPINVOKE.Math_randn_double();
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_int randperm(int n) {
    IntPtr cPtr = modshogunPINVOKE.Math_randperm(n);
    SWIGTYPE_p_int ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static long nchoosek(int n, int k) {
    long ret = modshogunPINVOKE.Math_nchoosek(n, k);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double dot(SWIGTYPE_p_bool v1, SWIGTYPE_p_bool v2, int n) {
    double ret = modshogunPINVOKE.Math_dot__SWIG_0(SWIGTYPE_p_bool.getCPtr(v1), SWIGTYPE_p_bool.getCPtr(v2), n);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_long_double dot(SWIGTYPE_p_long_double v1, SWIGTYPE_p_long_double v2, int n) {
    SWIGTYPE_p_long_double ret = new SWIGTYPE_p_long_double(modshogunPINVOKE.Math_dot__SWIG_1(SWIGTYPE_p_long_double.getCPtr(v1), SWIGTYPE_p_long_double.getCPtr(v2), n), true);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double dot(SWIGTYPE_p_double v1, SWIGTYPE_p_double v2, int n) {
    double ret = modshogunPINVOKE.Math_dot__SWIG_2(SWIGTYPE_p_double.getCPtr(v1), SWIGTYPE_p_double.getCPtr(v2), n);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float dot(SWIGTYPE_p_float v1, SWIGTYPE_p_float v2, int n) {
    float ret = modshogunPINVOKE.Math_dot__SWIG_3(SWIGTYPE_p_float.getCPtr(v1), SWIGTYPE_p_float.getCPtr(v2), n);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double dot(SWIGTYPE_p_unsigned_long_long v1, SWIGTYPE_p_unsigned_long_long v2, int n) {
    double ret = modshogunPINVOKE.Math_dot__SWIG_4(SWIGTYPE_p_unsigned_long_long.getCPtr(v1), SWIGTYPE_p_unsigned_long_long.getCPtr(v2), n);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double dot(SWIGTYPE_p_long_long v1, SWIGTYPE_p_long_long v2, int n) {
    double ret = modshogunPINVOKE.Math_dot__SWIG_5(SWIGTYPE_p_long_long.getCPtr(v1), SWIGTYPE_p_long_long.getCPtr(v2), n);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double dot(SWIGTYPE_p_int v1, SWIGTYPE_p_int v2, int n) {
    double ret = modshogunPINVOKE.Math_dot__SWIG_6(SWIGTYPE_p_int.getCPtr(v1), SWIGTYPE_p_int.getCPtr(v2), n);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double dot(SWIGTYPE_p_unsigned_int v1, SWIGTYPE_p_unsigned_int v2, int n) {
    double ret = modshogunPINVOKE.Math_dot__SWIG_7(SWIGTYPE_p_unsigned_int.getCPtr(v1), SWIGTYPE_p_unsigned_int.getCPtr(v2), n);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double dot(SWIGTYPE_p_unsigned_short v1, SWIGTYPE_p_unsigned_short v2, int n) {
    double ret = modshogunPINVOKE.Math_dot__SWIG_8(SWIGTYPE_p_unsigned_short.getCPtr(v1), SWIGTYPE_p_unsigned_short.getCPtr(v2), n);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double dot(SWIGTYPE_p_short v1, SWIGTYPE_p_short v2, int n) {
    double ret = modshogunPINVOKE.Math_dot__SWIG_9(SWIGTYPE_p_short.getCPtr(v1), SWIGTYPE_p_short.getCPtr(v2), n);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double dot(string v1, string v2, int n) {
    double ret = modshogunPINVOKE.Math_dot__SWIG_10(v1, v2, n);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double dot(SWIGTYPE_p_unsigned_char v1, SWIGTYPE_p_unsigned_char v2, int n) {
    double ret = modshogunPINVOKE.Math_dot__SWIG_11(SWIGTYPE_p_unsigned_char.getCPtr(v1), SWIGTYPE_p_unsigned_char.getCPtr(v2), n);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double dot(SWIGTYPE_p_signed_char v1, SWIGTYPE_p_signed_char v2, int n) {
    double ret = modshogunPINVOKE.Math_dot__SWIG_12(SWIGTYPE_p_signed_char.getCPtr(v1), SWIGTYPE_p_signed_char.getCPtr(v2), n);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double dot(SWIGTYPE_p_double v1, string v2, int n) {
    double ret = modshogunPINVOKE.Math_dot__SWIG_13(SWIGTYPE_p_double.getCPtr(v1), v2, n);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double mean(SWIGTYPE_p_double vec, int len) {
    double ret = modshogunPINVOKE.Math_mean(SWIGTYPE_p_double.getCPtr(vec), len);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double trace(SWIGTYPE_p_double mat, int cols, int rows) {
    double ret = modshogunPINVOKE.Math_trace(SWIGTYPE_p_double.getCPtr(mat), cols, rows);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void sort(SWIGTYPE_p_int a, int cols, int sort_col) {
    modshogunPINVOKE.Math_sort__SWIG_0(SWIGTYPE_p_int.getCPtr(a), cols, sort_col);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void sort(SWIGTYPE_p_int a, int cols) {
    modshogunPINVOKE.Math_sort__SWIG_1(SWIGTYPE_p_int.getCPtr(a), cols);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void sort(SWIGTYPE_p_double a, SWIGTYPE_p_int idx, int N) {
    modshogunPINVOKE.Math_sort__SWIG_2(SWIGTYPE_p_double.getCPtr(a), SWIGTYPE_p_int.getCPtr(idx), N);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_double compute_eigenvectors(SWIGTYPE_p_double matrix, int n, int m) {
    IntPtr cPtr = modshogunPINVOKE.Math_compute_eigenvectors(SWIGTYPE_p_double.getCPtr(matrix), n, m);
    SWIGTYPE_p_double ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double Align(string seq1, string seq2, int l1, int l2, double gapCost) {
    double ret = modshogunPINVOKE.Math_Align(seq1, seq2, l1, l2, gapCost);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double mutual_info(SWIGTYPE_p_double p1, SWIGTYPE_p_double p2, int len) {
    double ret = modshogunPINVOKE.Math_mutual_info(SWIGTYPE_p_double.getCPtr(p1), SWIGTYPE_p_double.getCPtr(p2), len);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double relative_entropy(SWIGTYPE_p_double p, SWIGTYPE_p_double q, int len) {
    double ret = modshogunPINVOKE.Math_relative_entropy(SWIGTYPE_p_double.getCPtr(p), SWIGTYPE_p_double.getCPtr(q), len);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double entropy(SWIGTYPE_p_double p, int len) {
    double ret = modshogunPINVOKE.Math_entropy(SWIGTYPE_p_double.getCPtr(p), len);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint get_seed() {
    uint ret = modshogunPINVOKE.Math_get_seed();
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint get_log_range() {
    uint ret = modshogunPINVOKE.Math_get_log_range();
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int is_finite(double f) {
    int ret = modshogunPINVOKE.Math_is_finite(f);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int is_infinity(double f) {
    int ret = modshogunPINVOKE.Math_is_infinity(f);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int is_nan(double f) {
    int ret = modshogunPINVOKE.Math_is_nan(f);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double[] fishers_exact_test_for_multiple_2x3_tables(double[,] tables) {
		IntPtr ptr = modshogunPINVOKE.Math_fishers_exact_test_for_multiple_2x3_tables(tables.GetLength(0), tables.GetLength(1), tables);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
		int[] size = new int[1];
		Marshal.Copy(ptr, size, 0, 1);

		int len = size[0];

		double[] ret = new double[len];

		Marshal.Copy(new IntPtr(ptr.ToInt64() + Marshal.SizeOf(typeof(int))), ret, 0, len);
		return ret;
}

  public static double fishers_exact_test_for_2x3_table(double[,] table) {
    double ret = modshogunPINVOKE.Math_fishers_exact_test_for_2x3_table(table.GetLength(0), table.GetLength(1), table);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double logarithmic_sum(double p, double q) {
    double ret = modshogunPINVOKE.Math_logarithmic_sum(p, q);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double INFTY {
    get {
      double ret = modshogunPINVOKE.Math_INFTY_get();
      if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double ALMOST_INFTY {
    get {
      double ret = modshogunPINVOKE.Math_ALMOST_INFTY_get();
      if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double ALMOST_NEG_INFTY {
    get {
      double ret = modshogunPINVOKE.Math_ALMOST_NEG_INFTY_get();
      if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double PI {
    get {
      double ret = modshogunPINVOKE.Math_PI_get();
      if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double MACHINE_EPSILON {
    get {
      double ret = modshogunPINVOKE.Math_MACHINE_EPSILON_get();
      if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double MAX_REAL_NUMBER {
    get {
      double ret = modshogunPINVOKE.Math_MAX_REAL_NUMBER_get();
      if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double MIN_REAL_NUMBER {
    get {
      double ret = modshogunPINVOKE.Math_MIN_REAL_NUMBER_get();
      if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}
