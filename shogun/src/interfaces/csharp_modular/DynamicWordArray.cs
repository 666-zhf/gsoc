/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class DynamicWordArray : SGObject {
  private HandleRef swigCPtr;

  internal DynamicWordArray(IntPtr cPtr, bool cMemoryOwn) : base(modshogunPINVOKE.DynamicWordArrayUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(DynamicWordArray obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~DynamicWordArray() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          modshogunPINVOKE.delete_DynamicWordArray(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public DynamicWordArray(int p_resize_granularity) : this(modshogunPINVOKE.new_DynamicWordArray__SWIG_0(p_resize_granularity), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public DynamicWordArray() : this(modshogunPINVOKE.new_DynamicWordArray__SWIG_1(), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public int set_granularity(int g) {
    int ret = modshogunPINVOKE.DynamicWordArray_set_granularity(swigCPtr, g);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int get_array_size() {
    int ret = modshogunPINVOKE.DynamicWordArray_get_array_size(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int get_num_elements() {
    int ret = modshogunPINVOKE.DynamicWordArray_get_num_elements(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort get_element(int index) {
    ushort ret = modshogunPINVOKE.DynamicWordArray_get_element(swigCPtr, index);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort get_element_safe(int index) {
    ushort ret = modshogunPINVOKE.DynamicWordArray_get_element_safe(swigCPtr, index);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool set_element(ushort element, int index) {
    bool ret = modshogunPINVOKE.DynamicWordArray_set_element(swigCPtr, element, index);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool insert_element(ushort element, int index) {
    bool ret = modshogunPINVOKE.DynamicWordArray_insert_element(swigCPtr, element, index);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool append_element(ushort element) {
    bool ret = modshogunPINVOKE.DynamicWordArray_append_element(swigCPtr, element);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void push_back(ushort element) {
    modshogunPINVOKE.DynamicWordArray_push_back(swigCPtr, element);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void pop_back() {
    modshogunPINVOKE.DynamicWordArray_pop_back(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public ushort back() {
    ushort ret = modshogunPINVOKE.DynamicWordArray_back(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int find_element(ushort element) {
    int ret = modshogunPINVOKE.DynamicWordArray_find_element(swigCPtr, element);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool delete_element(int idx) {
    bool ret = modshogunPINVOKE.DynamicWordArray_delete_element(swigCPtr, idx);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool resize_array(int n) {
    bool ret = modshogunPINVOKE.DynamicWordArray_resize_array(swigCPtr, n);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_unsigned_short get_array() {
    IntPtr cPtr = modshogunPINVOKE.DynamicWordArray_get_array(swigCPtr);
    SWIGTYPE_p_unsigned_short ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_short(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_array(SWIGTYPE_p_unsigned_short p_array, int p_num_elements, int array_size) {
    modshogunPINVOKE.DynamicWordArray_set_array(swigCPtr, SWIGTYPE_p_unsigned_short.getCPtr(p_array), p_num_elements, array_size);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clear_array() {
    modshogunPINVOKE.DynamicWordArray_clear_array(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void shuffle() {
    modshogunPINVOKE.DynamicWordArray_shuffle(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool save_serializable(SerializableFile file, string prefix) {
    bool ret = modshogunPINVOKE.DynamicWordArray_save_serializable__SWIG_0(swigCPtr, SerializableFile.getCPtr(file), prefix);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool save_serializable(SerializableFile file) {
    bool ret = modshogunPINVOKE.DynamicWordArray_save_serializable__SWIG_1(swigCPtr, SerializableFile.getCPtr(file));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool load_serializable(SerializableFile file, string prefix) {
    bool ret = modshogunPINVOKE.DynamicWordArray_load_serializable__SWIG_0(swigCPtr, SerializableFile.getCPtr(file), prefix);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool load_serializable(SerializableFile file) {
    bool ret = modshogunPINVOKE.DynamicWordArray_load_serializable__SWIG_1(swigCPtr, SerializableFile.getCPtr(file));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
