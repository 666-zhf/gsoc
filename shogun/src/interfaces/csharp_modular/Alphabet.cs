/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class Alphabet : SGObject {
  private HandleRef swigCPtr;

  internal Alphabet(IntPtr cPtr, bool cMemoryOwn) : base(modshogunPINVOKE.AlphabetUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Alphabet obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Alphabet() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          modshogunPINVOKE.delete_Alphabet(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Alphabet() : this(modshogunPINVOKE.new_Alphabet__SWIG_0(), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public Alphabet(string alpha, int len) : this(modshogunPINVOKE.new_Alphabet__SWIG_1(alpha, len), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public Alphabet(EAlphabet alpha) : this(modshogunPINVOKE.new_Alphabet__SWIG_2((int)alpha), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public Alphabet(Alphabet alpha) : this(modshogunPINVOKE.new_Alphabet__SWIG_3(Alphabet.getCPtr(alpha)), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool set_alphabet(EAlphabet alpha) {
    bool ret = modshogunPINVOKE.Alphabet_set_alphabet(swigCPtr, (int)alpha);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public EAlphabet get_alphabet() {
    EAlphabet ret = (EAlphabet)modshogunPINVOKE.Alphabet_get_alphabet(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int get_num_symbols() {
    int ret = modshogunPINVOKE.Alphabet_get_num_symbols(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int get_num_bits() {
    int ret = modshogunPINVOKE.Alphabet_get_num_bits(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public byte remap_to_bin(byte c) {
    byte ret = modshogunPINVOKE.Alphabet_remap_to_bin(swigCPtr, c);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public byte remap_to_char(byte c) {
    byte ret = modshogunPINVOKE.Alphabet_remap_to_char(swigCPtr, c);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void clear_histogram() {
    modshogunPINVOKE.Alphabet_clear_histogram(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void add_byte_to_histogram(byte p) {
    modshogunPINVOKE.Alphabet_add_byte_to_histogram(swigCPtr, p);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void print_histogram() {
    modshogunPINVOKE.Alphabet_print_histogram(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public long[] get_histogram() {
		IntPtr ptr = modshogunPINVOKE.Alphabet_get_histogram(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
		int[] size = new int[1];
		Marshal.Copy(ptr, size, 0, 1);

		int len = size[0];

		long[] ret = new long[len];

		Marshal.Copy(new IntPtr(ptr.ToInt64() + Marshal.SizeOf(typeof(int))), ret, 0, len);
		return ret;
}

  public bool check_alphabet(bool print_error) {
    bool ret = modshogunPINVOKE.Alphabet_check_alphabet__SWIG_0(swigCPtr, print_error);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool check_alphabet() {
    bool ret = modshogunPINVOKE.Alphabet_check_alphabet__SWIG_1(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool is_valid(byte c) {
    bool ret = modshogunPINVOKE.Alphabet_is_valid(swigCPtr, c);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool check_alphabet_size(bool print_error) {
    bool ret = modshogunPINVOKE.Alphabet_check_alphabet_size__SWIG_0(swigCPtr, print_error);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool check_alphabet_size() {
    bool ret = modshogunPINVOKE.Alphabet_check_alphabet_size__SWIG_1(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int get_num_symbols_in_histogram() {
    int ret = modshogunPINVOKE.Alphabet_get_num_symbols_in_histogram(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int get_max_value_in_histogram() {
    int ret = modshogunPINVOKE.Alphabet_get_max_value_in_histogram(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int get_num_bits_in_histogram() {
    int ret = modshogunPINVOKE.Alphabet_get_num_bits_in_histogram(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string get_alphabet_name(EAlphabet alphabet) {
    string ret = modshogunPINVOKE.Alphabet_get_alphabet_name((int)alphabet);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static byte B_A {
    get {
      byte ret = modshogunPINVOKE.Alphabet_B_A_get();
      if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static byte B_C {
    get {
      byte ret = modshogunPINVOKE.Alphabet_B_C_get();
      if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static byte B_G {
    get {
      byte ret = modshogunPINVOKE.Alphabet_B_G_get();
      if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static byte B_T {
    get {
      byte ret = modshogunPINVOKE.Alphabet_B_T_get();
      if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static byte B_0 {
    get {
      byte ret = modshogunPINVOKE.Alphabet_B_0_get();
      if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static byte MAPTABLE_UNDEF {
    get {
      byte ret = modshogunPINVOKE.Alphabet_MAPTABLE_UNDEF_get();
      if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static SWIGTYPE_p_p_char alphabet_names {
    set {
      modshogunPINVOKE.Alphabet_alphabet_names_set(SWIGTYPE_p_p_char.getCPtr(value));
      if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      IntPtr cPtr = modshogunPINVOKE.Alphabet_alphabet_names_get();
      SWIGTYPE_p_p_char ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_p_char(cPtr, false);
      if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}
