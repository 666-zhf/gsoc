/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class CDistanceMachine : Machine {
  private HandleRef swigCPtr;

  internal CDistanceMachine(IntPtr cPtr, bool cMemoryOwn) : base(modshogunPINVOKE.CDistanceMachineUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(CDistanceMachine obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CDistanceMachine() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          modshogunPINVOKE.delete_CDistanceMachine(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public CDistanceMachine() : this(modshogunPINVOKE.new_CDistanceMachine(), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_distance(Distance d) {
    modshogunPINVOKE.CDistanceMachine_set_distance(swigCPtr, Distance.getCPtr(d));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public Distance get_distance() {
    IntPtr cPtr = modshogunPINVOKE.CDistanceMachine_get_distance(swigCPtr);
    Distance ret = (cPtr == IntPtr.Zero) ? null : new Distance(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void distances_lhs(SWIGTYPE_p_double result, int idx_a1, int idx_a2, int idx_b) {
    modshogunPINVOKE.CDistanceMachine_distances_lhs(swigCPtr, SWIGTYPE_p_double.getCPtr(result), idx_a1, idx_a2, idx_b);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void distances_rhs(SWIGTYPE_p_double result, int idx_b1, int idx_b2, int idx_a) {
    modshogunPINVOKE.CDistanceMachine_distances_rhs(swigCPtr, SWIGTYPE_p_double.getCPtr(result), idx_b1, idx_b2, idx_a);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public override Labels apply() {
    IntPtr cPtr = modshogunPINVOKE.CDistanceMachine_apply__SWIG_0(swigCPtr);
    Labels ret = (cPtr == IntPtr.Zero) ? null : new Labels(cPtr, true);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override Labels apply(Features data) {
    IntPtr cPtr = modshogunPINVOKE.CDistanceMachine_apply__SWIG_1(swigCPtr, Features.getCPtr(data));
    Labels ret = (cPtr == IntPtr.Zero) ? null : new Labels(cPtr, true);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double apply(int num) {
    double ret = modshogunPINVOKE.CDistanceMachine_apply__SWIG_2(swigCPtr, num);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
