/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class Kernel : SGObject {
  private HandleRef swigCPtr;

  internal Kernel(IntPtr cPtr, bool cMemoryOwn) : base(modshogunPINVOKE.KernelUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Kernel obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Kernel() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          modshogunPINVOKE.delete_Kernel(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public double kernel(int idx_a, int idx_b) {
    double ret = modshogunPINVOKE.Kernel_kernel(swigCPtr, idx_a, idx_b);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double[,] get_kernel_matrix() {
	IntPtr ptr = modshogunPINVOKE.Kernel_get_kernel_matrix(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
	int[] ranks = new int[2];
	Marshal.Copy(ptr, ranks, 0, 2);

	int rows = ranks[0];
	int cols = ranks[1];
	int len = rows * cols;

	double[] ret = new double[len];

	Marshal.Copy(new IntPtr(ptr.ToInt64() + 2 * Marshal.SizeOf(typeof(int))), ret, 0, len);

	double[,] result = new double[rows, cols];
	for (int i = 0; i < rows; i++) {
		for (int j = 0; j < cols; j++) {
			result[i, j] = ret[i * cols + j];
		}
	}
	return result;
}

  public virtual double[] get_kernel_col(int j) {
		IntPtr ptr = modshogunPINVOKE.Kernel_get_kernel_col(swigCPtr, j);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
		int[] size = new int[1];
		Marshal.Copy(ptr, size, 0, 1);

		int len = size[0];

		double[] ret = new double[len];

		Marshal.Copy(new IntPtr(ptr.ToInt64() + Marshal.SizeOf(typeof(int))), ret, 0, len);
		return ret;
}

  public virtual double[] get_kernel_row(int i) {
		IntPtr ptr = modshogunPINVOKE.Kernel_get_kernel_row__SWIG_0(swigCPtr, i);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
		int[] size = new int[1];
		Marshal.Copy(ptr, size, 0, 1);

		int len = size[0];

		double[] ret = new double[len];

		Marshal.Copy(new IntPtr(ptr.ToInt64() + Marshal.SizeOf(typeof(int))), ret, 0, len);
		return ret;
}

  public virtual bool init(Features lhs, Features rhs) {
    bool ret = modshogunPINVOKE.Kernel_init(swigCPtr, Features.getCPtr(lhs), Features.getCPtr(rhs));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool set_normalizer(KernelNormalizer normalizer) {
    bool ret = modshogunPINVOKE.Kernel_set_normalizer(swigCPtr, KernelNormalizer.getCPtr(normalizer));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual KernelNormalizer get_normalizer() {
    IntPtr cPtr = modshogunPINVOKE.Kernel_get_normalizer(swigCPtr);
    KernelNormalizer ret = (cPtr == IntPtr.Zero) ? null : new KernelNormalizer(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool init_normalizer() {
    bool ret = modshogunPINVOKE.Kernel_init_normalizer(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void load(File loader) {
    modshogunPINVOKE.Kernel_load(swigCPtr, File.getCPtr(loader));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void save(File writer) {
    modshogunPINVOKE.Kernel_save(swigCPtr, File.getCPtr(writer));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public Features get_lhs() {
    IntPtr cPtr = modshogunPINVOKE.Kernel_get_lhs(swigCPtr);
    Features ret = (cPtr == IntPtr.Zero) ? null : new Features(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Features get_rhs() {
    IntPtr cPtr = modshogunPINVOKE.Kernel_get_rhs(swigCPtr);
    Features ret = (cPtr == IntPtr.Zero) ? null : new Features(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int get_num_vec_lhs() {
    int ret = modshogunPINVOKE.Kernel_get_num_vec_lhs(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int get_num_vec_rhs() {
    int ret = modshogunPINVOKE.Kernel_get_num_vec_rhs(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool has_features() {
    bool ret = modshogunPINVOKE.Kernel_has_features(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool get_lhs_equals_rhs() {
    bool ret = modshogunPINVOKE.Kernel_get_lhs_equals_rhs(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void remove_lhs_and_rhs() {
    modshogunPINVOKE.Kernel_remove_lhs_and_rhs(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void remove_lhs() {
    modshogunPINVOKE.Kernel_remove_lhs(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void remove_rhs() {
    modshogunPINVOKE.Kernel_remove_rhs(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual EKernelType get_kernel_type() {
    EKernelType ret = (EKernelType)modshogunPINVOKE.Kernel_get_kernel_type(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual EFeatureType get_feature_type() {
    EFeatureType ret = (EFeatureType)modshogunPINVOKE.Kernel_get_feature_type(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual EFeatureClass get_feature_class() {
    EFeatureClass ret = (EFeatureClass)modshogunPINVOKE.Kernel_get_feature_class(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_cache_size(int size) {
    modshogunPINVOKE.Kernel_set_cache_size(swigCPtr, size);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public int get_cache_size() {
    int ret = modshogunPINVOKE.Kernel_get_cache_size(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void cache_reset() {
    modshogunPINVOKE.Kernel_cache_reset(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public int get_max_elems_cache() {
    int ret = modshogunPINVOKE.Kernel_get_max_elems_cache(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int get_activenum_cache() {
    int ret = modshogunPINVOKE.Kernel_get_activenum_cache(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void get_kernel_row(int docnum, SWIGTYPE_p_int active2dnum, SWIGTYPE_p_double buffer, bool full_line) {
    modshogunPINVOKE.Kernel_get_kernel_row__SWIG_1(swigCPtr, docnum, SWIGTYPE_p_int.getCPtr(active2dnum), SWIGTYPE_p_double.getCPtr(buffer), full_line);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void get_kernel_row(int docnum, SWIGTYPE_p_int active2dnum, SWIGTYPE_p_double buffer) {
    modshogunPINVOKE.Kernel_get_kernel_row__SWIG_2(swigCPtr, docnum, SWIGTYPE_p_int.getCPtr(active2dnum), SWIGTYPE_p_double.getCPtr(buffer));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void cache_kernel_row(int x) {
    modshogunPINVOKE.Kernel_cache_kernel_row(swigCPtr, x);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void cache_multiple_kernel_rows(SWIGTYPE_p_int key, int varnum) {
    modshogunPINVOKE.Kernel_cache_multiple_kernel_rows(swigCPtr, SWIGTYPE_p_int.getCPtr(key), varnum);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void kernel_cache_reset_lru() {
    modshogunPINVOKE.Kernel_kernel_cache_reset_lru(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void kernel_cache_shrink(int totdoc, int num_shrink, SWIGTYPE_p_int after) {
    modshogunPINVOKE.Kernel_kernel_cache_shrink(swigCPtr, totdoc, num_shrink, SWIGTYPE_p_int.getCPtr(after));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void resize_kernel_cache(long size, bool regression_hack) {
    modshogunPINVOKE.Kernel_resize_kernel_cache__SWIG_0(swigCPtr, size, regression_hack);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void resize_kernel_cache(long size) {
    modshogunPINVOKE.Kernel_resize_kernel_cache__SWIG_1(swigCPtr, size);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_time(int t) {
    modshogunPINVOKE.Kernel_set_time(swigCPtr, t);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public int kernel_cache_touch(int cacheidx) {
    int ret = modshogunPINVOKE.Kernel_kernel_cache_touch(swigCPtr, cacheidx);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int kernel_cache_check(int cacheidx) {
    int ret = modshogunPINVOKE.Kernel_kernel_cache_check(swigCPtr, cacheidx);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int kernel_cache_space_available() {
    int ret = modshogunPINVOKE.Kernel_kernel_cache_space_available(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void kernel_cache_init(int size, bool regression_hack) {
    modshogunPINVOKE.Kernel_kernel_cache_init__SWIG_0(swigCPtr, size, regression_hack);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void kernel_cache_init(int size) {
    modshogunPINVOKE.Kernel_kernel_cache_init__SWIG_1(swigCPtr, size);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void kernel_cache_cleanup() {
    modshogunPINVOKE.Kernel_kernel_cache_cleanup(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void list_kernel() {
    modshogunPINVOKE.Kernel_list_kernel(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool has_property(EKernelProperty p) {
    bool ret = modshogunPINVOKE.Kernel_has_property(swigCPtr, (int)p);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void clear_normal() {
    modshogunPINVOKE.Kernel_clear_normal(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void add_to_normal(int vector_idx, double weight) {
    modshogunPINVOKE.Kernel_add_to_normal(swigCPtr, vector_idx, weight);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public EOptimizationType get_optimization_type() {
    EOptimizationType ret = (EOptimizationType)modshogunPINVOKE.Kernel_get_optimization_type(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void set_optimization_type(EOptimizationType t) {
    modshogunPINVOKE.Kernel_set_optimization_type(swigCPtr, (int)t);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool get_is_initialized() {
    bool ret = modshogunPINVOKE.Kernel_get_is_initialized(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool init_optimization(int count, SWIGTYPE_p_int IDX, SWIGTYPE_p_double weights) {
    bool ret = modshogunPINVOKE.Kernel_init_optimization(swigCPtr, count, SWIGTYPE_p_int.getCPtr(IDX), SWIGTYPE_p_double.getCPtr(weights));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool delete_optimization() {
    bool ret = modshogunPINVOKE.Kernel_delete_optimization(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool init_optimization_svm(SVM svm) {
    bool ret = modshogunPINVOKE.Kernel_init_optimization_svm(swigCPtr, SVM.getCPtr(svm));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double compute_optimized(int vector_idx) {
    double ret = modshogunPINVOKE.Kernel_compute_optimized(swigCPtr, vector_idx);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void compute_batch(int num_vec, SWIGTYPE_p_int vec_idx, SWIGTYPE_p_double target, int num_suppvec, SWIGTYPE_p_int IDX, SWIGTYPE_p_double alphas, double factor) {
    modshogunPINVOKE.Kernel_compute_batch__SWIG_0(swigCPtr, num_vec, SWIGTYPE_p_int.getCPtr(vec_idx), SWIGTYPE_p_double.getCPtr(target), num_suppvec, SWIGTYPE_p_int.getCPtr(IDX), SWIGTYPE_p_double.getCPtr(alphas), factor);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void compute_batch(int num_vec, SWIGTYPE_p_int vec_idx, SWIGTYPE_p_double target, int num_suppvec, SWIGTYPE_p_int IDX, SWIGTYPE_p_double alphas) {
    modshogunPINVOKE.Kernel_compute_batch__SWIG_1(swigCPtr, num_vec, SWIGTYPE_p_int.getCPtr(vec_idx), SWIGTYPE_p_double.getCPtr(target), num_suppvec, SWIGTYPE_p_int.getCPtr(IDX), SWIGTYPE_p_double.getCPtr(alphas));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public double get_combined_kernel_weight() {
    double ret = modshogunPINVOKE.Kernel_get_combined_kernel_weight(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_combined_kernel_weight(double nw) {
    modshogunPINVOKE.Kernel_set_combined_kernel_weight(swigCPtr, nw);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual int get_num_subkernels() {
    int ret = modshogunPINVOKE.Kernel_get_num_subkernels(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void compute_by_subkernel(int vector_idx, SWIGTYPE_p_double subkernel_contrib) {
    modshogunPINVOKE.Kernel_compute_by_subkernel(swigCPtr, vector_idx, SWIGTYPE_p_double.getCPtr(subkernel_contrib));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SWIGTYPE_p_double get_subkernel_weights(SWIGTYPE_p_int num_weights) {
    IntPtr cPtr = modshogunPINVOKE.Kernel_get_subkernel_weights(swigCPtr, SWIGTYPE_p_int.getCPtr(num_weights));
    SWIGTYPE_p_double ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void set_subkernel_weights(double[] weights) {
    modshogunPINVOKE.Kernel_set_subkernel_weights(swigCPtr, weights.Length, weights);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

}
