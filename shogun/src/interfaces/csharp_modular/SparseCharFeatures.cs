/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class SparseCharFeatures : DotFeatures {
  private HandleRef swigCPtr;

  internal SparseCharFeatures(IntPtr cPtr, bool cMemoryOwn) : base(modshogunPINVOKE.SparseCharFeaturesUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(SparseCharFeatures obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~SparseCharFeatures() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          modshogunPINVOKE.delete_SparseCharFeatures(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public SparseCharFeatures(int size) : this(modshogunPINVOKE.new_SparseCharFeatures__SWIG_0(size), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public SparseCharFeatures() : this(modshogunPINVOKE.new_SparseCharFeatures__SWIG_1(), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public SparseCharFeatures(CharSparseVector src, int num_feat, int num_vec, bool copy) : this(modshogunPINVOKE.new_SparseCharFeatures__SWIG_2(CharSparseVector.getCPtr(src), num_feat, num_vec, copy), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public SparseCharFeatures(CharSparseVector src, int num_feat, int num_vec) : this(modshogunPINVOKE.new_SparseCharFeatures__SWIG_3(CharSparseVector.getCPtr(src), num_feat, num_vec), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public SparseCharFeatures(CharSparseMatrix sparse) : this(modshogunPINVOKE.new_SparseCharFeatures__SWIG_4(CharSparseMatrix.getCPtr(sparse)), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public SparseCharFeatures(byte[,] dense) : this(modshogunPINVOKE.new_SparseCharFeatures__SWIG_5(dense.GetLength(0), dense.GetLength(1), dense), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public SparseCharFeatures(SparseCharFeatures orig) : this(modshogunPINVOKE.new_SparseCharFeatures__SWIG_6(SparseCharFeatures.getCPtr(orig)), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public SparseCharFeatures(File loader) : this(modshogunPINVOKE.new_SparseCharFeatures__SWIG_7(File.getCPtr(loader)), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void free_sparse_feature_matrix() {
    modshogunPINVOKE.SparseCharFeatures_free_sparse_feature_matrix(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void free_sparse_features() {
    modshogunPINVOKE.SparseCharFeatures_free_sparse_features(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public char get_feature(int num, int index) {
    char ret = modshogunPINVOKE.SparseCharFeatures_get_feature(swigCPtr, num, index);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public byte[] get_full_feature_vector(int num) {
		IntPtr ptr = modshogunPINVOKE.SparseCharFeatures_get_full_feature_vector(swigCPtr, num);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
		int[] size = new int[1];
		Marshal.Copy(ptr, size, 0, 1);

		int len = size[0];

		byte[] ret = new byte[len];

		Marshal.Copy(new IntPtr(ptr.ToInt64() + Marshal.SizeOf(typeof(int))), ret, 0, len);
		return ret;
}

  public CharSparseVector get_sparse_feature_vector(int num) {
    CharSparseVector ret = new CharSparseVector(modshogunPINVOKE.SparseCharFeatures_get_sparse_feature_vector(swigCPtr, num), true);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CharSparseMatrix get_sparse_feature_matrix() {
    CharSparseMatrix ret = new CharSparseMatrix(modshogunPINVOKE.SparseCharFeatures_get_sparse_feature_matrix(swigCPtr), true);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SparseCharFeatures get_transposed() {
    IntPtr cPtr = modshogunPINVOKE.SparseCharFeatures_get_transposed(swigCPtr);
    SparseCharFeatures ret = (cPtr == IntPtr.Zero) ? null : new SparseCharFeatures(cPtr, true);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_sparse_feature_matrix(CharSparseMatrix sm) {
    modshogunPINVOKE.SparseCharFeatures_set_sparse_feature_matrix(swigCPtr, CharSparseMatrix.getCPtr(sm));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public byte[,] get_full_feature_matrix() {
	IntPtr ptr = modshogunPINVOKE.SparseCharFeatures_get_full_feature_matrix(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
	int[] ranks = new int[2];
	Marshal.Copy(ptr, ranks, 0, 2);

	int rows = ranks[0];
	int cols = ranks[1];
	int len = rows * cols;

	byte[] ret = new byte[len];

	Marshal.Copy(new IntPtr(ptr.ToInt64() + 2 * Marshal.SizeOf(typeof(int))), ret, 0, len);

	byte[,] result = new byte[rows, cols];
	for (int i = 0; i < rows; i++) {
		for (int j = 0; j < cols; j++) {
			result[i, j] = ret[i * cols + j];
		}
	}
	return result;
}

  public virtual bool set_full_feature_matrix(byte[,] full) {
    bool ret = modshogunPINVOKE.SparseCharFeatures_set_full_feature_matrix(swigCPtr, full.GetLength(0), full.GetLength(1), full);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool apply_preprocessor(bool force_preprocessing) {
    bool ret = modshogunPINVOKE.SparseCharFeatures_apply_preprocessor__SWIG_0(swigCPtr, force_preprocessing);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool apply_preprocessor() {
    bool ret = modshogunPINVOKE.SparseCharFeatures_apply_preprocessor__SWIG_1(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool obtain_from_simple(CharFeatures sf) {
    bool ret = modshogunPINVOKE.SparseCharFeatures_obtain_from_simple(swigCPtr, CharFeatures.getCPtr(sf));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int get_num_features() {
    int ret = modshogunPINVOKE.SparseCharFeatures_get_num_features(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int set_num_features(int num) {
    int ret = modshogunPINVOKE.SparseCharFeatures_set_num_features(swigCPtr, num);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public long get_num_nonzero_entries() {
    long ret = modshogunPINVOKE.SparseCharFeatures_get_num_nonzero_entries(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Labels load_svmlight_file(string fname, bool do_sort_features) {
    IntPtr cPtr = modshogunPINVOKE.SparseCharFeatures_load_svmlight_file__SWIG_0(swigCPtr, fname, do_sort_features);
    Labels ret = (cPtr == IntPtr.Zero) ? null : new Labels(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Labels load_svmlight_file(string fname) {
    IntPtr cPtr = modshogunPINVOKE.SparseCharFeatures_load_svmlight_file__SWIG_1(swigCPtr, fname);
    Labels ret = (cPtr == IntPtr.Zero) ? null : new Labels(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void sort_features() {
    modshogunPINVOKE.SparseCharFeatures_sort_features(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool write_svmlight_file(string fname, Labels label) {
    bool ret = modshogunPINVOKE.SparseCharFeatures_write_svmlight_file(swigCPtr, fname, Labels.getCPtr(label));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
