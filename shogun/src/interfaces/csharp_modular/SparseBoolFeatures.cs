/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class SparseBoolFeatures : DotFeatures {
  private HandleRef swigCPtr;

  internal SparseBoolFeatures(IntPtr cPtr, bool cMemoryOwn) : base(modshogunPINVOKE.SparseBoolFeaturesUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(SparseBoolFeatures obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~SparseBoolFeatures() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          modshogunPINVOKE.delete_SparseBoolFeatures(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public SparseBoolFeatures(int size) : this(modshogunPINVOKE.new_SparseBoolFeatures__SWIG_0(size), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public SparseBoolFeatures() : this(modshogunPINVOKE.new_SparseBoolFeatures__SWIG_1(), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public SparseBoolFeatures(BoolSparseVector src, int num_feat, int num_vec, bool copy) : this(modshogunPINVOKE.new_SparseBoolFeatures__SWIG_2(BoolSparseVector.getCPtr(src), num_feat, num_vec, copy), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public SparseBoolFeatures(BoolSparseVector src, int num_feat, int num_vec) : this(modshogunPINVOKE.new_SparseBoolFeatures__SWIG_3(BoolSparseVector.getCPtr(src), num_feat, num_vec), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public SparseBoolFeatures(BoolSparseMatrix sparse) : this(modshogunPINVOKE.new_SparseBoolFeatures__SWIG_4(BoolSparseMatrix.getCPtr(sparse)), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public SparseBoolFeatures(BoolMatrix dense) : this(modshogunPINVOKE.new_SparseBoolFeatures__SWIG_5(BoolMatrix.getCPtr(dense)), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public SparseBoolFeatures(SparseBoolFeatures orig) : this(modshogunPINVOKE.new_SparseBoolFeatures__SWIG_6(SparseBoolFeatures.getCPtr(orig)), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public SparseBoolFeatures(File loader) : this(modshogunPINVOKE.new_SparseBoolFeatures__SWIG_7(File.getCPtr(loader)), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void free_sparse_feature_matrix() {
    modshogunPINVOKE.SparseBoolFeatures_free_sparse_feature_matrix(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void free_sparse_features() {
    modshogunPINVOKE.SparseBoolFeatures_free_sparse_features(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool get_feature(int num, int index) {
    bool ret = modshogunPINVOKE.SparseBoolFeatures_get_feature(swigCPtr, num, index);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BoolVector get_full_feature_vector(int num) {
    BoolVector ret = new BoolVector(modshogunPINVOKE.SparseBoolFeatures_get_full_feature_vector(swigCPtr, num), true);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BoolSparseVector get_sparse_feature_vector(int num) {
    BoolSparseVector ret = new BoolSparseVector(modshogunPINVOKE.SparseBoolFeatures_get_sparse_feature_vector(swigCPtr, num), true);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BoolSparseMatrix get_sparse_feature_matrix() {
    BoolSparseMatrix ret = new BoolSparseMatrix(modshogunPINVOKE.SparseBoolFeatures_get_sparse_feature_matrix(swigCPtr), true);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SparseBoolFeatures get_transposed() {
    IntPtr cPtr = modshogunPINVOKE.SparseBoolFeatures_get_transposed(swigCPtr);
    SparseBoolFeatures ret = (cPtr == IntPtr.Zero) ? null : new SparseBoolFeatures(cPtr, true);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_sparse_feature_matrix(BoolSparseMatrix sm) {
    modshogunPINVOKE.SparseBoolFeatures_set_sparse_feature_matrix(swigCPtr, BoolSparseMatrix.getCPtr(sm));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public BoolMatrix get_full_feature_matrix() {
    BoolMatrix ret = new BoolMatrix(modshogunPINVOKE.SparseBoolFeatures_get_full_feature_matrix(swigCPtr), true);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool set_full_feature_matrix(BoolMatrix full) {
    bool ret = modshogunPINVOKE.SparseBoolFeatures_set_full_feature_matrix(swigCPtr, BoolMatrix.getCPtr(full));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool apply_preprocessor(bool force_preprocessing) {
    bool ret = modshogunPINVOKE.SparseBoolFeatures_apply_preprocessor__SWIG_0(swigCPtr, force_preprocessing);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool apply_preprocessor() {
    bool ret = modshogunPINVOKE.SparseBoolFeatures_apply_preprocessor__SWIG_1(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool obtain_from_simple(BoolFeatures sf) {
    bool ret = modshogunPINVOKE.SparseBoolFeatures_obtain_from_simple(swigCPtr, BoolFeatures.getCPtr(sf));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int get_num_features() {
    int ret = modshogunPINVOKE.SparseBoolFeatures_get_num_features(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int set_num_features(int num) {
    int ret = modshogunPINVOKE.SparseBoolFeatures_set_num_features(swigCPtr, num);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public long get_num_nonzero_entries() {
    long ret = modshogunPINVOKE.SparseBoolFeatures_get_num_nonzero_entries(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Labels load_svmlight_file(string fname, bool do_sort_features) {
    IntPtr cPtr = modshogunPINVOKE.SparseBoolFeatures_load_svmlight_file__SWIG_0(swigCPtr, fname, do_sort_features);
    Labels ret = (cPtr == IntPtr.Zero) ? null : new Labels(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Labels load_svmlight_file(string fname) {
    IntPtr cPtr = modshogunPINVOKE.SparseBoolFeatures_load_svmlight_file__SWIG_1(swigCPtr, fname);
    Labels ret = (cPtr == IntPtr.Zero) ? null : new Labels(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void sort_features() {
    modshogunPINVOKE.SparseBoolFeatures_sort_features(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool write_svmlight_file(string fname, Labels label) {
    bool ret = modshogunPINVOKE.SparseBoolFeatures_write_svmlight_file(swigCPtr, fname, Labels.getCPtr(label));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
