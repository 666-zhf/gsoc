/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class WDSVMOcas : Machine {
  private HandleRef swigCPtr;

  internal WDSVMOcas(IntPtr cPtr, bool cMemoryOwn) : base(modshogunPINVOKE.WDSVMOcasUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(WDSVMOcas obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~WDSVMOcas() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          modshogunPINVOKE.delete_WDSVMOcas(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public WDSVMOcas() : this(modshogunPINVOKE.new_WDSVMOcas__SWIG_0(), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public WDSVMOcas(E_SVM_TYPE type) : this(modshogunPINVOKE.new_WDSVMOcas__SWIG_1((int)type), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public WDSVMOcas(double C, int d, int from_d, StringByteFeatures traindat, Labels trainlab) : this(modshogunPINVOKE.new_WDSVMOcas__SWIG_2(C, d, from_d, StringByteFeatures.getCPtr(traindat), Labels.getCPtr(trainlab)), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_C(double c_neg, double c_pos) {
    modshogunPINVOKE.WDSVMOcas_set_C(swigCPtr, c_neg, c_pos);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public double get_C1() {
    double ret = modshogunPINVOKE.WDSVMOcas_get_C1(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double get_C2() {
    double ret = modshogunPINVOKE.WDSVMOcas_get_C2(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_epsilon(double eps) {
    modshogunPINVOKE.WDSVMOcas_set_epsilon(swigCPtr, eps);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public double get_epsilon() {
    double ret = modshogunPINVOKE.WDSVMOcas_get_epsilon(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_features(StringByteFeatures feat) {
    modshogunPINVOKE.WDSVMOcas_set_features(swigCPtr, StringByteFeatures.getCPtr(feat));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public StringByteFeatures get_features() {
    IntPtr cPtr = modshogunPINVOKE.WDSVMOcas_get_features(swigCPtr);
    StringByteFeatures ret = (cPtr == IntPtr.Zero) ? null : new StringByteFeatures(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_bias_enabled(bool enable_bias) {
    modshogunPINVOKE.WDSVMOcas_set_bias_enabled(swigCPtr, enable_bias);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool get_bias_enabled() {
    bool ret = modshogunPINVOKE.WDSVMOcas_get_bias_enabled(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_bufsize(int sz) {
    modshogunPINVOKE.WDSVMOcas_set_bufsize(swigCPtr, sz);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public int get_bufsize() {
    int ret = modshogunPINVOKE.WDSVMOcas_get_bufsize(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_degree(int d, int from_d) {
    modshogunPINVOKE.WDSVMOcas_set_degree(swigCPtr, d, from_d);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public int get_degree() {
    int ret = modshogunPINVOKE.WDSVMOcas_get_degree(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override Labels apply() {
    IntPtr cPtr = modshogunPINVOKE.WDSVMOcas_apply__SWIG_0(swigCPtr);
    Labels ret = (cPtr == IntPtr.Zero) ? null : new Labels(cPtr, true);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override Labels apply(Features data) {
    IntPtr cPtr = modshogunPINVOKE.WDSVMOcas_apply__SWIG_1(swigCPtr, Features.getCPtr(data));
    Labels ret = (cPtr == IntPtr.Zero) ? null : new Labels(cPtr, true);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double apply(int num) {
    double ret = modshogunPINVOKE.WDSVMOcas_apply__SWIG_2(swigCPtr, num);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_normalization_const() {
    modshogunPINVOKE.WDSVMOcas_set_normalization_const(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public double get_normalization_const() {
    double ret = modshogunPINVOKE.WDSVMOcas_get_normalization_const(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
