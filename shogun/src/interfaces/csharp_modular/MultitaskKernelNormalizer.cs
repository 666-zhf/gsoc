/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class MultitaskKernelNormalizer : KernelNormalizer {
  private HandleRef swigCPtr;

  internal MultitaskKernelNormalizer(IntPtr cPtr, bool cMemoryOwn) : base(modshogunPINVOKE.MultitaskKernelNormalizerUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(MultitaskKernelNormalizer obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~MultitaskKernelNormalizer() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          modshogunPINVOKE.delete_MultitaskKernelNormalizer(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public MultitaskKernelNormalizer() : this(modshogunPINVOKE.new_MultitaskKernelNormalizer__SWIG_0(), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public MultitaskKernelNormalizer(SWIGTYPE_p_std__vectorT_int_t task_vector) : this(modshogunPINVOKE.new_MultitaskKernelNormalizer__SWIG_1(SWIGTYPE_p_std__vectorT_int_t.getCPtr(task_vector)), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public int get_num_unique_tasks(SWIGTYPE_p_std__vectorT_int_t vec) {
    int ret = modshogunPINVOKE.MultitaskKernelNormalizer_get_num_unique_tasks(swigCPtr, SWIGTYPE_p_std__vectorT_int_t.getCPtr(vec));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_int_t get_task_vector_lhs() {
    SWIGTYPE_p_std__vectorT_int_t ret = new SWIGTYPE_p_std__vectorT_int_t(modshogunPINVOKE.MultitaskKernelNormalizer_get_task_vector_lhs(swigCPtr), true);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_task_vector_lhs(SWIGTYPE_p_std__vectorT_int_t vec) {
    modshogunPINVOKE.MultitaskKernelNormalizer_set_task_vector_lhs(swigCPtr, SWIGTYPE_p_std__vectorT_int_t.getCPtr(vec));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__vectorT_int_t get_task_vector_rhs() {
    SWIGTYPE_p_std__vectorT_int_t ret = new SWIGTYPE_p_std__vectorT_int_t(modshogunPINVOKE.MultitaskKernelNormalizer_get_task_vector_rhs(swigCPtr), true);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_task_vector_rhs(SWIGTYPE_p_std__vectorT_int_t vec) {
    modshogunPINVOKE.MultitaskKernelNormalizer_set_task_vector_rhs(swigCPtr, SWIGTYPE_p_std__vectorT_int_t.getCPtr(vec));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_task_vector(SWIGTYPE_p_std__vectorT_int_t vec) {
    modshogunPINVOKE.MultitaskKernelNormalizer_set_task_vector(swigCPtr, SWIGTYPE_p_std__vectorT_int_t.getCPtr(vec));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public double get_task_similarity(int task_lhs, int task_rhs) {
    double ret = modshogunPINVOKE.MultitaskKernelNormalizer_get_task_similarity(swigCPtr, task_lhs, task_rhs);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_task_similarity(int task_lhs, int task_rhs, double similarity) {
    modshogunPINVOKE.MultitaskKernelNormalizer_set_task_similarity(swigCPtr, task_lhs, task_rhs, similarity);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public MultitaskKernelNormalizer KernelNormalizerToMultitaskKernelNormalizer(KernelNormalizer n) {
    IntPtr cPtr = modshogunPINVOKE.MultitaskKernelNormalizer_KernelNormalizerToMultitaskKernelNormalizer(swigCPtr, KernelNormalizer.getCPtr(n));
    MultitaskKernelNormalizer ret = (cPtr == IntPtr.Zero) ? null : new MultitaskKernelNormalizer(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
