/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class StreamingDotFeatures : StreamingFeatures {
  private HandleRef swigCPtr;

  internal StreamingDotFeatures(IntPtr cPtr, bool cMemoryOwn) : base(modshogunPINVOKE.StreamingDotFeaturesUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(StreamingDotFeatures obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~StreamingDotFeatures() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          modshogunPINVOKE.delete_StreamingDotFeatures(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public virtual float dot(StreamingDotFeatures df) {
    float ret = modshogunPINVOKE.StreamingDotFeatures_dot(swigCPtr, StreamingDotFeatures.getCPtr(df));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void expand_if_required(SWIGTYPE_p_float vec, SWIGTYPE_p_int len) {
    modshogunPINVOKE.StreamingDotFeatures_expand_if_required__SWIG_0(swigCPtr, SWIGTYPE_p_float.getCPtr(vec), SWIGTYPE_p_int.getCPtr(len));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void expand_if_required(SWIGTYPE_p_double vec, SWIGTYPE_p_int len) {
    modshogunPINVOKE.StreamingDotFeatures_expand_if_required__SWIG_1(swigCPtr, SWIGTYPE_p_double.getCPtr(vec), SWIGTYPE_p_int.getCPtr(len));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual int get_dim_feature_space() {
    int ret = modshogunPINVOKE.StreamingDotFeatures_get_dim_feature_space(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int get_nnz_features_for_vector() {
    int ret = modshogunPINVOKE.StreamingDotFeatures_get_nnz_features_for_vector(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
