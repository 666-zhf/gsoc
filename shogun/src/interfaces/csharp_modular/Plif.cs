/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class Plif : PlifBase {
  private HandleRef swigCPtr;

  internal Plif(IntPtr cPtr, bool cMemoryOwn) : base(modshogunPINVOKE.PlifUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Plif obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Plif() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          modshogunPINVOKE.delete_Plif(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Plif(int len) : this(modshogunPINVOKE.new_Plif__SWIG_0(len), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public Plif() : this(modshogunPINVOKE.new_Plif__SWIG_1(), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void init_penalty_struct_cache() {
    modshogunPINVOKE.Plif_init_penalty_struct_cache(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public double lookup_penalty_svm(double p_value, SWIGTYPE_p_double d_values) {
    double ret = modshogunPINVOKE.Plif_lookup_penalty_svm(swigCPtr, p_value, SWIGTYPE_p_double.getCPtr(d_values));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double lookup_penalty(double p_value, SWIGTYPE_p_double svm_values) {
    double ret = modshogunPINVOKE.Plif_lookup_penalty__SWIG_0(swigCPtr, p_value, SWIGTYPE_p_double.getCPtr(svm_values));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double lookup_penalty(int p_value, SWIGTYPE_p_double svm_values) {
    double ret = modshogunPINVOKE.Plif_lookup_penalty__SWIG_1(swigCPtr, p_value, SWIGTYPE_p_double.getCPtr(svm_values));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double lookup(double p_value) {
    double ret = modshogunPINVOKE.Plif_lookup(swigCPtr, p_value);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void penalty_add_derivative_svm(double p_value, SWIGTYPE_p_double svm_values, double factor) {
    modshogunPINVOKE.Plif_penalty_add_derivative_svm(swigCPtr, p_value, SWIGTYPE_p_double.getCPtr(svm_values), factor);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_double get_cum_derivative(SWIGTYPE_p_int p_len) {
    IntPtr cPtr = modshogunPINVOKE.Plif_get_cum_derivative(swigCPtr, SWIGTYPE_p_int.getCPtr(p_len));
    SWIGTYPE_p_double ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool set_transform_type(string type_str) {
    bool ret = modshogunPINVOKE.Plif_set_transform_type(swigCPtr, type_str);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string get_transform_type() {
    string ret = modshogunPINVOKE.Plif_get_transform_type(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_id(int p_id) {
    modshogunPINVOKE.Plif_set_id(swigCPtr, p_id);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public int get_id() {
    int ret = modshogunPINVOKE.Plif_get_id(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_use_svm(int p_use_svm) {
    modshogunPINVOKE.Plif_set_use_svm(swigCPtr, p_use_svm);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public int get_use_svm() {
    int ret = modshogunPINVOKE.Plif_get_use_svm(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_use_cache(int p_use_cache) {
    modshogunPINVOKE.Plif_set_use_cache(swigCPtr, p_use_cache);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void invalidate_cache() {
    modshogunPINVOKE.Plif_invalidate_cache(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public int get_use_cache() {
    int ret = modshogunPINVOKE.Plif_get_use_cache(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_plif(int p_len, SWIGTYPE_p_double p_limits, SWIGTYPE_p_double p_penalties) {
    modshogunPINVOKE.Plif_set_plif(swigCPtr, p_len, SWIGTYPE_p_double.getCPtr(p_limits), SWIGTYPE_p_double.getCPtr(p_penalties));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_plif_limits(double[] p_limits) {
    modshogunPINVOKE.Plif_set_plif_limits(swigCPtr, p_limits.Length, p_limits);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_plif_penalty(double[] p_penalties) {
    modshogunPINVOKE.Plif_set_plif_penalty(swigCPtr, p_penalties.Length, p_penalties);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_plif_length(int p_len) {
    modshogunPINVOKE.Plif_set_plif_length(swigCPtr, p_len);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_double get_plif_limits() {
    IntPtr cPtr = modshogunPINVOKE.Plif_get_plif_limits(swigCPtr);
    SWIGTYPE_p_double ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_double get_plif_penalties() {
    IntPtr cPtr = modshogunPINVOKE.Plif_get_plif_penalties(swigCPtr);
    SWIGTYPE_p_double ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_max_value(double p_max_value) {
    modshogunPINVOKE.Plif_set_max_value(swigCPtr, p_max_value);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_min_value(double p_min_value) {
    modshogunPINVOKE.Plif_set_min_value(swigCPtr, p_min_value);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_plif_name(string p_name) {
    modshogunPINVOKE.Plif_set_plif_name(swigCPtr, p_name);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public string get_plif_name() {
    string ret = modshogunPINVOKE.Plif_get_plif_name(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool get_do_calc() {
    bool ret = modshogunPINVOKE.Plif_get_do_calc(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_do_calc(bool b) {
    modshogunPINVOKE.Plif_set_do_calc(swigCPtr, b);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public int get_plif_len() {
    int ret = modshogunPINVOKE.Plif_get_plif_len(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void delete_penalty_struct(SWIGTYPE_p_p_shogun__CPlif PEN, int P) {
    modshogunPINVOKE.Plif_delete_penalty_struct(SWIGTYPE_p_p_shogun__CPlif.getCPtr(PEN), P);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

}
