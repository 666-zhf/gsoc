/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class SGDQN : LinearMachine {
  private HandleRef swigCPtr;

  internal SGDQN(IntPtr cPtr, bool cMemoryOwn) : base(modshogunPINVOKE.SGDQNUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(SGDQN obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~SGDQN() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          modshogunPINVOKE.delete_SGDQN(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public SGDQN() : this(modshogunPINVOKE.new_SGDQN__SWIG_0(), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public SGDQN(double C) : this(modshogunPINVOKE.new_SGDQN__SWIG_1(C), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public SGDQN(double C, DotFeatures traindat, Labels trainlab) : this(modshogunPINVOKE.new_SGDQN__SWIG_2(C, DotFeatures.getCPtr(traindat), Labels.getCPtr(trainlab)), true) {
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool train(Features data) {
    bool ret = modshogunPINVOKE.SGDQN_train__SWIG_0(swigCPtr, Features.getCPtr(data));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool train() {
    bool ret = modshogunPINVOKE.SGDQN_train__SWIG_1(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_C(double c_neg, double c_pos) {
    modshogunPINVOKE.SGDQN_set_C(swigCPtr, c_neg, c_pos);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public double get_C1() {
    double ret = modshogunPINVOKE.SGDQN_get_C1(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double get_C2() {
    double ret = modshogunPINVOKE.SGDQN_get_C2(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_epochs(int e) {
    modshogunPINVOKE.SGDQN_set_epochs(swigCPtr, e);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public int get_epochs() {
    int ret = modshogunPINVOKE.SGDQN_get_epochs(swigCPtr);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void compute_ratio(SWIGTYPE_p_double W, SWIGTYPE_p_double W_1, SWIGTYPE_p_double B, SWIGTYPE_p_double dst, int dim, double regularizer_lambda, double loss) {
    modshogunPINVOKE.SGDQN_compute_ratio(swigCPtr, SWIGTYPE_p_double.getCPtr(W), SWIGTYPE_p_double.getCPtr(W_1), SWIGTYPE_p_double.getCPtr(B), SWIGTYPE_p_double.getCPtr(dst), dim, regularizer_lambda, loss);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void combine_and_clip(SWIGTYPE_p_double Bc, SWIGTYPE_p_double B, int dim, double c1, double c2, double v1, double v2) {
    modshogunPINVOKE.SGDQN_combine_and_clip(swigCPtr, SWIGTYPE_p_double.getCPtr(Bc), SWIGTYPE_p_double.getCPtr(B), dim, c1, c2, v1, v2);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_loss_function(SWIGTYPE_p_CLossFunction loss_func) {
    modshogunPINVOKE.SGDQN_set_loss_function(swigCPtr, SWIGTYPE_p_CLossFunction.getCPtr(loss_func));
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_CLossFunction get_loss_function() {
    IntPtr cPtr = modshogunPINVOKE.SGDQN_get_loss_function(swigCPtr);
    SWIGTYPE_p_CLossFunction ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_CLossFunction(cPtr, false);
    if (modshogunPINVOKE.SWIGPendingException.Pending) throw modshogunPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
